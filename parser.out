Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DELETE
    ISNEGADO
    NEW

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> instrucciones
Rule 2     cuerpo -> funcion
Rule 3     cuerpo -> estrcontrol
Rule 4     cuerpo -> def_clase
Rule 5     cuerpo -> constructor
Rule 6     cuerpo -> <empty>
Rule 7     instrucciones -> instruccion PUNTOYCOMA
Rule 8     instrucciones -> instruccion PUNTOYCOMA instrucciones
Rule 9     instrucciones -> BREAK PUNTOYCOMA
Rule 10    instrucciones -> CONTINUE PUNTOYCOMA
Rule 11    instrucciones -> RETURN VARIABLE PUNTOYCOMA
Rule 12    instrucciones -> TYPEOF VARIABLE
Rule 13    instrucciones -> VARIABLE INSTANCEOF VARIABLE
Rule 14    instrucciones -> estrcontrol
Rule 15    instrucciones -> estrcontrol instrucciones
Rule 16    instrucciones -> llamarfuncion
Rule 17    instrucciones -> llamarfuncion instrucciones
Rule 18    instrucciones -> trycatch
Rule 19    instrucciones -> trycatch instrucciones
Rule 20    instruccion -> asignacion
Rule 21    instruccion -> expression
Rule 22    instruccion -> comparacion
Rule 23    instruccion -> declaracion
Rule 24    instruccion -> declaasig
Rule 25    instruccion -> operadores
Rule 26    declaracion -> VAR VARIABLE
Rule 27    declaracion -> LET VARIABLE
Rule 28    declaasig -> VAR asignacion
Rule 29    declaasig -> LET asignacion
Rule 30    declaasig -> CONST asignacion
Rule 31    estrcontrol -> if
Rule 32    estrcontrol -> for
Rule 33    estrcontrol -> while
Rule 34    estrcontrol -> dowhile
Rule 35    estrcontrol -> switch
Rule 36    valor -> ENTERO
Rule 37    valor -> FLOAT
Rule 38    valor -> STRING
Rule 39    valor -> BOOL
Rule 40    if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER
Rule 41    if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
Rule 42    if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else
Rule 43    elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER
Rule 44    elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
Rule 45    elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else
Rule 46    else -> ELSE LIZQ instrucciones LDER
Rule 47    else -> ELSE LIZQ LDER
Rule 48    for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
Rule 49    for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
Rule 50    for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
Rule 51    while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
Rule 52    dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
Rule 53    switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
Rule 54    cases -> CASE VARIABLE DOSPUNTOS instrucciones
Rule 55    cases -> CASE VARIABLE DOSPUNTOS instrucciones cases
Rule 56    cases -> DEFAULT DOSPUNTOS instrucciones
Rule 57    throw -> THROW VARIABLE PUNTOYCOMA
Rule 58    trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
Rule 59    trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
Rule 60    trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
Rule 61    asignacion -> VARIABLE IGUAL expression
Rule 62    asignacion -> VARIABLE IGUAL comparacion
Rule 63    asignacion -> VARIABLE IGUAL valor
Rule 64    asignacion -> VARIABLE IGUAL llamarfuncion
Rule 65    asignacion -> VARIABLE IGUAL dec_array
Rule 66    dec_array -> CIZQ array_enteros CDER
Rule 67    dec_array -> CIZQ array_flotante CDER
Rule 68    dec_array -> CIZQ array_string CDER
Rule 69    dec_array -> CIZQ array_boolean CDER
Rule 70    array_enteros -> ENTERO
Rule 71    array_enteros -> ENTERO COMA array_enteros
Rule 72    array_flotante -> FLOAT
Rule 73    array_flotante -> FLOAT COMA array_flotante
Rule 74    array_string -> STRING
Rule 75    array_string -> STRING COMA array_string
Rule 76    array_boolean -> BOOL
Rule 77    array_boolean -> BOOL COMA array_boolean
Rule 78    comparacion -> expression comparador expression
Rule 79    comparacion -> expression comparador expression DAMPERSAND comparacion
Rule 80    comparacion -> expression comparador expression DTUBO comparacion
Rule 81    comparacion -> STRING DIGUAL STRING
Rule 82    comparacion -> VARIABLE comparador ENTERO
Rule 83    comparador -> MAYOR
Rule 84    comparador -> MENOR
Rule 85    comparador -> MAYIGUAL
Rule 86    comparador -> MENIGUAL
Rule 87    comparador -> DIGUAL
Rule 88    comparador -> NOIGUAL
Rule 89    operadores -> VARIABLE DSUMA
Rule 90    operadores -> VARIABLE DRESTA
Rule 91    expression -> expression SUMA term
Rule 92    expression -> VARIABLE SUMA VARIABLE
Rule 93    expression -> expression RESTA term
Rule 94    expression -> VARIABLE RESTA VARIABLE
Rule 95    expression -> term
Rule 96    expression -> VARIABLE
Rule 97    term -> term MULTI factor
Rule 98    term -> VARIABLE MULTI VARIABLE
Rule 99    term -> term DIV factor
Rule 100   term -> VARIABLE RESTA VARIABLE
Rule 101   term -> factor
Rule 102   factor -> ENTERO
Rule 103   factor -> FLOAT
Rule 104   expression -> PIZQ expression PDER
Rule 105   expression -> LIZQ expression LDER
Rule 106   funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
Rule 107   funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
Rule 108   funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
Rule 109   funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ LDER
Rule 110   llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA
Rule 111   llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA
Rule 112   argumentos -> VARIABLE
Rule 113   argumentos -> VARIABLE COMA argumentos
Rule 114   constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
Rule 115   constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER
Rule 116   constructor -> CONSTRUCTOR PIZQ PDER LIZQ LDER
Rule 117   var_class -> THIS PUNTO VARIABLE
Rule 118   var_class -> THIS PUNTO VARIABLE IGUAL valor
Rule 119   var_class -> THIS PUNTO VARIABLE IGUAL VARIABLE
Rule 120   metodo_cuerpo_class -> cuerpo
Rule 121   metodo_cuerpo_class -> var_class
Rule 122   metodo_cuerpo_class -> metodo_cuerpo_class
Rule 123   metodos_class -> funcion
Rule 124   metodos_class -> funcion metodos_class
Rule 125   cuerpo_class -> metodos_class
Rule 126   cuerpo_class -> constructor
Rule 127   cuerpo_class -> constructor metodos_class
Rule 128   def_clase -> CLASS VARIABLE LIZQ cuerpo_class LDER
Rule 129   def_clase -> CLASS VARIABLE LIZQ LDER
Rule 130   operadores_arit -> SUMA
Rule 131   operadores_arit -> RESTA
Rule 132   operadores_arit -> MULTI
Rule 133   operadores_arit -> DIV
Rule 134   operadores_arit -> MOD
Rule 135   numerico -> ENTERO
Rule 136   numerico -> FLOAT
Rule 137   sem_numeros -> numerico operadores_arit numerico
Rule 138   sem_string -> STRING SUMA STRING
Rule 139   castring -> castring_numero
Rule 140   castring -> castring_boolean
Rule 141   castring_numero -> STR PIZQ numerico PDER
Rule 142   castring_numero -> PIZQ numerico PDER PUNTO TOSTRING PIZQ PDER
Rule 143   castring_boolean -> STR PIZQ BOOL PDER
Rule 144   castring_boolean -> BOOL PUNTO TOSTRING PIZQ PDER

Terminals, with rules where they appear

BOOL                 : 39 76 77 143 144
BREAK                : 9
CASE                 : 54 55
CATCH                : 58 60
CDER                 : 66 67 68 69
CIZQ                 : 66 67 68 69
CLASS                : 128 129
COMA                 : 71 73 75 77 113
CONST                : 30
CONSTRUCTOR          : 114 115 116
CONTINUE             : 10
DAMPERSAND           : 79
DEFAULT              : 56
DELETE               : 
DIGUAL               : 81 87
DIV                  : 99 133
DO                   : 52
DOSPUNTOS            : 54 55 56
DRESTA               : 90
DSUMA                : 89
DTUBO                : 80
ELSE                 : 43 44 45 46 47
ENTERO               : 36 70 71 82 102 135
FINALLY              : 59 60
FLOAT                : 37 72 73 103 136
FOR                  : 48 49 50
FUNCTION             : 106 107 108 109
IF                   : 40 41 42 43 44 45
IGUAL                : 61 62 63 64 65 118 119
IN                   : 50
INSTANCEOF           : 13
ISNEGADO             : 
LDER                 : 40 41 42 43 44 45 46 47 48 49 50 51 52 53 58 58 59 59 60 60 60 105 106 107 108 109 114 115 116 128 129
LET                  : 27 29
LIZQ                 : 40 41 42 43 44 45 46 47 48 49 50 51 52 53 58 58 59 59 60 60 60 105 106 107 108 109 114 115 116 128 129
MAYIGUAL             : 85
MAYOR                : 83
MENIGUAL             : 86
MENOR                : 84
MOD                  : 134
MULTI                : 97 98 132
NEW                  : 
NOIGUAL              : 88
PDER                 : 40 41 42 43 44 45 48 49 50 51 52 53 58 60 104 106 107 108 109 110 111 114 115 116 141 142 142 143 144
PIZQ                 : 40 41 42 43 44 45 48 49 50 51 52 53 58 60 104 106 107 108 109 110 111 114 115 116 141 142 142 143 144
PUNTO                : 117 118 119 142 144
PUNTOYCOMA           : 7 8 9 10 11 48 48 49 49 52 57 110 111
RESTA                : 93 94 100 131
RETURN               : 11
STR                  : 141 143
STRING               : 38 74 75 81 81 138 138
SUMA                 : 91 92 130 138
SWITCH               : 53
THIS                 : 117 118 119
THROW                : 57
TOSTRING             : 142 144
TRY                  : 58 59 60
TYPEOF               : 12
VAR                  : 26 28
VARIABLE             : 11 12 13 13 26 27 50 53 54 55 57 58 60 61 62 63 64 65 82 89 90 92 92 94 94 96 98 98 100 100 106 107 108 109 110 111 112 113 117 118 119 119 128 129
WHILE                : 51 52
error                : 

Nonterminals, with rules where they appear

argumentos           : 106 107 110 113 114
array_boolean        : 69 77
array_enteros        : 66 71
array_flotante       : 67 73
array_string         : 68 75
asignacion           : 20 28 29 30 49
cases                : 53 55
castring             : 
castring_boolean     : 140
castring_numero      : 139
comparacion          : 22 40 41 42 43 44 45 48 49 51 52 62 79 80
comparador           : 78 79 80 82
constructor          : 5 126 127
cuerpo               : 120 0
cuerpo_class         : 128
dec_array            : 65
declaasig            : 24 48 49
declaracion          : 23 50
def_clase            : 4
dowhile              : 34
else                 : 42 45
elseif               : 41 44
estrcontrol          : 3 14 15
expression           : 21 61 78 78 79 79 80 80 91 93 104 105
factor               : 97 99 101
for                  : 32
funcion              : 2 123 124
if                   : 31
instruccion          : 7 8
instrucciones        : 1 8 15 17 19 40 41 42 43 44 45 46 48 49 50 51 52 54 55 56 58 58 59 59 60 60 60 106 108
llamarfuncion        : 16 17 64
metodo_cuerpo_class  : 114 115 122
metodos_class        : 124 125 127
numerico             : 137 137 141 142
operadores           : 25 48
operadores_arit      : 137
sem_numeros          : 
sem_string           : 
switch               : 35
term                 : 91 93 95 97 99
throw                : 
trycatch             : 18 19
valor                : 63 118
var_class            : 121
while                : 33

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . instrucciones
    (2) cuerpo -> . funcion
    (3) cuerpo -> . estrcontrol
    (4) cuerpo -> . def_clase
    (5) cuerpo -> . constructor
    (6) cuerpo -> .
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (128) def_clase -> . CLASS VARIABLE LIZQ cuerpo_class LDER
    (129) def_clase -> . CLASS VARIABLE LIZQ LDER
    (114) constructor -> . CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ LDER
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    $end            reduce using rule 6 (cuerpo -> .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    FUNCTION        shift and go to state 15
    CLASS           shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    TRY             shift and go to state 31
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    cuerpo                         shift and go to state 1
    instrucciones                  shift and go to state 2
    funcion                        shift and go to state 3
    estrcontrol                    shift and go to state 4
    def_clase                      shift and go to state 5
    constructor                    shift and go to state 6
    instruccion                    shift and go to state 7
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> instrucciones .

    $end            reduce using rule 1 (cuerpo -> instrucciones .)
    LDER            reduce using rule 1 (cuerpo -> instrucciones .)


state 3

    (2) cuerpo -> funcion .

    $end            reduce using rule 2 (cuerpo -> funcion .)
    LDER            reduce using rule 2 (cuerpo -> funcion .)


state 4

    (3) cuerpo -> estrcontrol .
    (14) instrucciones -> estrcontrol .
    (15) instrucciones -> estrcontrol . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

  ! reduce/reduce conflict for $end resolved using rule 3 (cuerpo -> estrcontrol .)
  ! reduce/reduce conflict for LDER resolved using rule 3 (cuerpo -> estrcontrol .)
    $end            reduce using rule 3 (cuerpo -> estrcontrol .)
    LDER            reduce using rule 3 (cuerpo -> estrcontrol .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

  ! $end            [ reduce using rule 14 (instrucciones -> estrcontrol .) ]
  ! LDER            [ reduce using rule 14 (instrucciones -> estrcontrol .) ]

    estrcontrol                    shift and go to state 45
    instrucciones                  shift and go to state 46
    instruccion                    shift and go to state 7
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 5

    (4) cuerpo -> def_clase .

    $end            reduce using rule 4 (cuerpo -> def_clase .)
    LDER            reduce using rule 4 (cuerpo -> def_clase .)


state 6

    (5) cuerpo -> constructor .

    $end            reduce using rule 5 (cuerpo -> constructor .)
    LDER            reduce using rule 5 (cuerpo -> constructor .)


state 7

    (7) instrucciones -> instruccion . PUNTOYCOMA
    (8) instrucciones -> instruccion . PUNTOYCOMA instrucciones

    PUNTOYCOMA      shift and go to state 47


state 8

    (9) instrucciones -> BREAK . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 48


state 9

    (10) instrucciones -> CONTINUE . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 49


state 10

    (11) instrucciones -> RETURN . VARIABLE PUNTOYCOMA

    VARIABLE        shift and go to state 50


state 11

    (13) instrucciones -> VARIABLE . INSTANCEOF VARIABLE
    (110) llamarfuncion -> VARIABLE . PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> VARIABLE . PIZQ PDER PUNTOYCOMA
    (61) asignacion -> VARIABLE . IGUAL expression
    (62) asignacion -> VARIABLE . IGUAL comparacion
    (63) asignacion -> VARIABLE . IGUAL valor
    (64) asignacion -> VARIABLE . IGUAL llamarfuncion
    (65) asignacion -> VARIABLE . IGUAL dec_array
    (92) expression -> VARIABLE . SUMA VARIABLE
    (94) expression -> VARIABLE . RESTA VARIABLE
    (96) expression -> VARIABLE .
    (82) comparacion -> VARIABLE . comparador ENTERO
    (89) operadores -> VARIABLE . DSUMA
    (90) operadores -> VARIABLE . DRESTA
    (98) term -> VARIABLE . MULTI VARIABLE
    (100) term -> VARIABLE . RESTA VARIABLE
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYIGUAL resolved as shift
  ! shift/reduce conflict for MENIGUAL resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
    INSTANCEOF      shift and go to state 51
    PIZQ            shift and go to state 52
    IGUAL           shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    PUNTOYCOMA      reduce using rule 96 (expression -> VARIABLE .)
    DSUMA           shift and go to state 57
    DRESTA          shift and go to state 58
    MULTI           shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

  ! SUMA            [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! RESTA           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! DIGUAL          [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! NOIGUAL         [ reduce using rule 96 (expression -> VARIABLE .) ]

    comparador                     shift and go to state 56

state 12

    (12) instrucciones -> TYPEOF . VARIABLE

    VARIABLE        shift and go to state 66


state 13

    (16) instrucciones -> llamarfuncion .
    (17) instrucciones -> llamarfuncion . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    $end            reduce using rule 16 (instrucciones -> llamarfuncion .)
    LDER            reduce using rule 16 (instrucciones -> llamarfuncion .)
    CASE            reduce using rule 16 (instrucciones -> llamarfuncion .)
    DEFAULT         reduce using rule 16 (instrucciones -> llamarfuncion .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    llamarfuncion                  shift and go to state 13
    instrucciones                  shift and go to state 67
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 14

    (18) instrucciones -> trycatch .
    (19) instrucciones -> trycatch . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    $end            reduce using rule 18 (instrucciones -> trycatch .)
    LDER            reduce using rule 18 (instrucciones -> trycatch .)
    CASE            reduce using rule 18 (instrucciones -> trycatch .)
    DEFAULT         reduce using rule 18 (instrucciones -> trycatch .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    trycatch                       shift and go to state 14
    instrucciones                  shift and go to state 68
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 15

    (106) funcion -> FUNCTION . VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> FUNCTION . VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> FUNCTION . VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> FUNCTION . VARIABLE PIZQ PDER LIZQ LDER

    VARIABLE        shift and go to state 69


state 16

    (104) expression -> PIZQ . expression PDER
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 71
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    expression                     shift and go to state 70
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 17

    (105) expression -> LIZQ . expression LDER
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 71
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    expression                     shift and go to state 72
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 18

    (31) estrcontrol -> if .

    BREAK           reduce using rule 31 (estrcontrol -> if .)
    CONTINUE        reduce using rule 31 (estrcontrol -> if .)
    RETURN          reduce using rule 31 (estrcontrol -> if .)
    TYPEOF          reduce using rule 31 (estrcontrol -> if .)
    VARIABLE        reduce using rule 31 (estrcontrol -> if .)
    TRY             reduce using rule 31 (estrcontrol -> if .)
    PIZQ            reduce using rule 31 (estrcontrol -> if .)
    LIZQ            reduce using rule 31 (estrcontrol -> if .)
    STRING          reduce using rule 31 (estrcontrol -> if .)
    VAR             reduce using rule 31 (estrcontrol -> if .)
    LET             reduce using rule 31 (estrcontrol -> if .)
    CONST           reduce using rule 31 (estrcontrol -> if .)
    IF              reduce using rule 31 (estrcontrol -> if .)
    FOR             reduce using rule 31 (estrcontrol -> if .)
    WHILE           reduce using rule 31 (estrcontrol -> if .)
    DO              reduce using rule 31 (estrcontrol -> if .)
    SWITCH          reduce using rule 31 (estrcontrol -> if .)
    ENTERO          reduce using rule 31 (estrcontrol -> if .)
    FLOAT           reduce using rule 31 (estrcontrol -> if .)
    $end            reduce using rule 31 (estrcontrol -> if .)
    LDER            reduce using rule 31 (estrcontrol -> if .)
    CASE            reduce using rule 31 (estrcontrol -> if .)
    DEFAULT         reduce using rule 31 (estrcontrol -> if .)


state 19

    (32) estrcontrol -> for .

    BREAK           reduce using rule 32 (estrcontrol -> for .)
    CONTINUE        reduce using rule 32 (estrcontrol -> for .)
    RETURN          reduce using rule 32 (estrcontrol -> for .)
    TYPEOF          reduce using rule 32 (estrcontrol -> for .)
    VARIABLE        reduce using rule 32 (estrcontrol -> for .)
    TRY             reduce using rule 32 (estrcontrol -> for .)
    PIZQ            reduce using rule 32 (estrcontrol -> for .)
    LIZQ            reduce using rule 32 (estrcontrol -> for .)
    STRING          reduce using rule 32 (estrcontrol -> for .)
    VAR             reduce using rule 32 (estrcontrol -> for .)
    LET             reduce using rule 32 (estrcontrol -> for .)
    CONST           reduce using rule 32 (estrcontrol -> for .)
    IF              reduce using rule 32 (estrcontrol -> for .)
    FOR             reduce using rule 32 (estrcontrol -> for .)
    WHILE           reduce using rule 32 (estrcontrol -> for .)
    DO              reduce using rule 32 (estrcontrol -> for .)
    SWITCH          reduce using rule 32 (estrcontrol -> for .)
    ENTERO          reduce using rule 32 (estrcontrol -> for .)
    FLOAT           reduce using rule 32 (estrcontrol -> for .)
    $end            reduce using rule 32 (estrcontrol -> for .)
    LDER            reduce using rule 32 (estrcontrol -> for .)
    CASE            reduce using rule 32 (estrcontrol -> for .)
    DEFAULT         reduce using rule 32 (estrcontrol -> for .)


state 20

    (33) estrcontrol -> while .

    BREAK           reduce using rule 33 (estrcontrol -> while .)
    CONTINUE        reduce using rule 33 (estrcontrol -> while .)
    RETURN          reduce using rule 33 (estrcontrol -> while .)
    TYPEOF          reduce using rule 33 (estrcontrol -> while .)
    VARIABLE        reduce using rule 33 (estrcontrol -> while .)
    TRY             reduce using rule 33 (estrcontrol -> while .)
    PIZQ            reduce using rule 33 (estrcontrol -> while .)
    LIZQ            reduce using rule 33 (estrcontrol -> while .)
    STRING          reduce using rule 33 (estrcontrol -> while .)
    VAR             reduce using rule 33 (estrcontrol -> while .)
    LET             reduce using rule 33 (estrcontrol -> while .)
    CONST           reduce using rule 33 (estrcontrol -> while .)
    IF              reduce using rule 33 (estrcontrol -> while .)
    FOR             reduce using rule 33 (estrcontrol -> while .)
    WHILE           reduce using rule 33 (estrcontrol -> while .)
    DO              reduce using rule 33 (estrcontrol -> while .)
    SWITCH          reduce using rule 33 (estrcontrol -> while .)
    ENTERO          reduce using rule 33 (estrcontrol -> while .)
    FLOAT           reduce using rule 33 (estrcontrol -> while .)
    $end            reduce using rule 33 (estrcontrol -> while .)
    LDER            reduce using rule 33 (estrcontrol -> while .)
    CASE            reduce using rule 33 (estrcontrol -> while .)
    DEFAULT         reduce using rule 33 (estrcontrol -> while .)


state 21

    (34) estrcontrol -> dowhile .

    BREAK           reduce using rule 34 (estrcontrol -> dowhile .)
    CONTINUE        reduce using rule 34 (estrcontrol -> dowhile .)
    RETURN          reduce using rule 34 (estrcontrol -> dowhile .)
    TYPEOF          reduce using rule 34 (estrcontrol -> dowhile .)
    VARIABLE        reduce using rule 34 (estrcontrol -> dowhile .)
    TRY             reduce using rule 34 (estrcontrol -> dowhile .)
    PIZQ            reduce using rule 34 (estrcontrol -> dowhile .)
    LIZQ            reduce using rule 34 (estrcontrol -> dowhile .)
    STRING          reduce using rule 34 (estrcontrol -> dowhile .)
    VAR             reduce using rule 34 (estrcontrol -> dowhile .)
    LET             reduce using rule 34 (estrcontrol -> dowhile .)
    CONST           reduce using rule 34 (estrcontrol -> dowhile .)
    IF              reduce using rule 34 (estrcontrol -> dowhile .)
    FOR             reduce using rule 34 (estrcontrol -> dowhile .)
    WHILE           reduce using rule 34 (estrcontrol -> dowhile .)
    DO              reduce using rule 34 (estrcontrol -> dowhile .)
    SWITCH          reduce using rule 34 (estrcontrol -> dowhile .)
    ENTERO          reduce using rule 34 (estrcontrol -> dowhile .)
    FLOAT           reduce using rule 34 (estrcontrol -> dowhile .)
    $end            reduce using rule 34 (estrcontrol -> dowhile .)
    LDER            reduce using rule 34 (estrcontrol -> dowhile .)
    CASE            reduce using rule 34 (estrcontrol -> dowhile .)
    DEFAULT         reduce using rule 34 (estrcontrol -> dowhile .)


state 22

    (35) estrcontrol -> switch .

    BREAK           reduce using rule 35 (estrcontrol -> switch .)
    CONTINUE        reduce using rule 35 (estrcontrol -> switch .)
    RETURN          reduce using rule 35 (estrcontrol -> switch .)
    TYPEOF          reduce using rule 35 (estrcontrol -> switch .)
    VARIABLE        reduce using rule 35 (estrcontrol -> switch .)
    TRY             reduce using rule 35 (estrcontrol -> switch .)
    PIZQ            reduce using rule 35 (estrcontrol -> switch .)
    LIZQ            reduce using rule 35 (estrcontrol -> switch .)
    STRING          reduce using rule 35 (estrcontrol -> switch .)
    VAR             reduce using rule 35 (estrcontrol -> switch .)
    LET             reduce using rule 35 (estrcontrol -> switch .)
    CONST           reduce using rule 35 (estrcontrol -> switch .)
    IF              reduce using rule 35 (estrcontrol -> switch .)
    FOR             reduce using rule 35 (estrcontrol -> switch .)
    WHILE           reduce using rule 35 (estrcontrol -> switch .)
    DO              reduce using rule 35 (estrcontrol -> switch .)
    SWITCH          reduce using rule 35 (estrcontrol -> switch .)
    ENTERO          reduce using rule 35 (estrcontrol -> switch .)
    FLOAT           reduce using rule 35 (estrcontrol -> switch .)
    $end            reduce using rule 35 (estrcontrol -> switch .)
    LDER            reduce using rule 35 (estrcontrol -> switch .)
    CASE            reduce using rule 35 (estrcontrol -> switch .)
    DEFAULT         reduce using rule 35 (estrcontrol -> switch .)


state 23

    (128) def_clase -> CLASS . VARIABLE LIZQ cuerpo_class LDER
    (129) def_clase -> CLASS . VARIABLE LIZQ LDER

    VARIABLE        shift and go to state 73


state 24

    (114) constructor -> CONSTRUCTOR . PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> CONSTRUCTOR . PIZQ PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> CONSTRUCTOR . PIZQ PDER LIZQ LDER

    PIZQ            shift and go to state 74


state 25

    (20) instruccion -> asignacion .

    PUNTOYCOMA      reduce using rule 20 (instruccion -> asignacion .)


state 26

    (21) instruccion -> expression .
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term
    (78) comparacion -> expression . comparador expression
    (79) comparacion -> expression . comparador expression DAMPERSAND comparacion
    (80) comparacion -> expression . comparador expression DTUBO comparacion
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

    PUNTOYCOMA      reduce using rule 21 (instruccion -> expression .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

    comparador                     shift and go to state 77

state 27

    (22) instruccion -> comparacion .

    PUNTOYCOMA      reduce using rule 22 (instruccion -> comparacion .)


state 28

    (23) instruccion -> declaracion .

    PUNTOYCOMA      reduce using rule 23 (instruccion -> declaracion .)


state 29

    (24) instruccion -> declaasig .

    PUNTOYCOMA      reduce using rule 24 (instruccion -> declaasig .)


state 30

    (25) instruccion -> operadores .

    PUNTOYCOMA      reduce using rule 25 (instruccion -> operadores .)


state 31

    (58) trycatch -> TRY . LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> TRY . LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> TRY . LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    LIZQ            shift and go to state 78


state 32

    (40) if -> IF . PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> IF . PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> IF . PIZQ comparacion PDER LIZQ instrucciones LDER else

    PIZQ            shift and go to state 79


state 33

    (48) for -> FOR . PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR . PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> FOR . PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER

    PIZQ            shift and go to state 80


state 34

    (51) while -> WHILE . PIZQ comparacion PDER LIZQ instrucciones LDER

    PIZQ            shift and go to state 81


state 35

    (52) dowhile -> DO . LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA

    LIZQ            shift and go to state 82


state 36

    (53) switch -> SWITCH . PIZQ VARIABLE PDER LIZQ cases LDER

    PIZQ            shift and go to state 83


state 37

    (95) expression -> term .
    (97) term -> term . MULTI factor
    (99) term -> term . DIV factor

    SUMA            reduce using rule 95 (expression -> term .)
    RESTA           reduce using rule 95 (expression -> term .)
    MAYOR           reduce using rule 95 (expression -> term .)
    MENOR           reduce using rule 95 (expression -> term .)
    MAYIGUAL        reduce using rule 95 (expression -> term .)
    MENIGUAL        reduce using rule 95 (expression -> term .)
    DIGUAL          reduce using rule 95 (expression -> term .)
    NOIGUAL         reduce using rule 95 (expression -> term .)
    PUNTOYCOMA      reduce using rule 95 (expression -> term .)
    PDER            reduce using rule 95 (expression -> term .)
    LDER            reduce using rule 95 (expression -> term .)
    DAMPERSAND      reduce using rule 95 (expression -> term .)
    DTUBO           reduce using rule 95 (expression -> term .)
    MULTI           shift and go to state 84
    DIV             shift and go to state 85


state 38

    (81) comparacion -> STRING . DIGUAL STRING

    DIGUAL          shift and go to state 86


state 39

    (102) factor -> ENTERO .

    MULTI           reduce using rule 102 (factor -> ENTERO .)
    DIV             reduce using rule 102 (factor -> ENTERO .)
    SUMA            reduce using rule 102 (factor -> ENTERO .)
    RESTA           reduce using rule 102 (factor -> ENTERO .)
    MAYOR           reduce using rule 102 (factor -> ENTERO .)
    MENOR           reduce using rule 102 (factor -> ENTERO .)
    MAYIGUAL        reduce using rule 102 (factor -> ENTERO .)
    MENIGUAL        reduce using rule 102 (factor -> ENTERO .)
    DIGUAL          reduce using rule 102 (factor -> ENTERO .)
    NOIGUAL         reduce using rule 102 (factor -> ENTERO .)
    PUNTOYCOMA      reduce using rule 102 (factor -> ENTERO .)
    PDER            reduce using rule 102 (factor -> ENTERO .)
    LDER            reduce using rule 102 (factor -> ENTERO .)
    DAMPERSAND      reduce using rule 102 (factor -> ENTERO .)
    DTUBO           reduce using rule 102 (factor -> ENTERO .)


state 40

    (26) declaracion -> VAR . VARIABLE
    (28) declaasig -> VAR . asignacion
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 87

    asignacion                     shift and go to state 88

state 41

    (27) declaracion -> LET . VARIABLE
    (29) declaasig -> LET . asignacion
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 89

    asignacion                     shift and go to state 90

state 42

    (30) declaasig -> CONST . asignacion
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 92

    asignacion                     shift and go to state 91

state 43

    (101) term -> factor .

    MULTI           reduce using rule 101 (term -> factor .)
    DIV             reduce using rule 101 (term -> factor .)
    SUMA            reduce using rule 101 (term -> factor .)
    RESTA           reduce using rule 101 (term -> factor .)
    MAYOR           reduce using rule 101 (term -> factor .)
    MENOR           reduce using rule 101 (term -> factor .)
    MAYIGUAL        reduce using rule 101 (term -> factor .)
    MENIGUAL        reduce using rule 101 (term -> factor .)
    DIGUAL          reduce using rule 101 (term -> factor .)
    NOIGUAL         reduce using rule 101 (term -> factor .)
    PUNTOYCOMA      reduce using rule 101 (term -> factor .)
    PDER            reduce using rule 101 (term -> factor .)
    LDER            reduce using rule 101 (term -> factor .)
    DAMPERSAND      reduce using rule 101 (term -> factor .)
    DTUBO           reduce using rule 101 (term -> factor .)


state 44

    (103) factor -> FLOAT .

    MULTI           reduce using rule 103 (factor -> FLOAT .)
    DIV             reduce using rule 103 (factor -> FLOAT .)
    SUMA            reduce using rule 103 (factor -> FLOAT .)
    RESTA           reduce using rule 103 (factor -> FLOAT .)
    MAYOR           reduce using rule 103 (factor -> FLOAT .)
    MENOR           reduce using rule 103 (factor -> FLOAT .)
    MAYIGUAL        reduce using rule 103 (factor -> FLOAT .)
    MENIGUAL        reduce using rule 103 (factor -> FLOAT .)
    DIGUAL          reduce using rule 103 (factor -> FLOAT .)
    NOIGUAL         reduce using rule 103 (factor -> FLOAT .)
    PUNTOYCOMA      reduce using rule 103 (factor -> FLOAT .)
    PDER            reduce using rule 103 (factor -> FLOAT .)
    LDER            reduce using rule 103 (factor -> FLOAT .)
    DAMPERSAND      reduce using rule 103 (factor -> FLOAT .)
    DTUBO           reduce using rule 103 (factor -> FLOAT .)


state 45

    (14) instrucciones -> estrcontrol .
    (15) instrucciones -> estrcontrol . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    $end            reduce using rule 14 (instrucciones -> estrcontrol .)
    LDER            reduce using rule 14 (instrucciones -> estrcontrol .)
    CASE            reduce using rule 14 (instrucciones -> estrcontrol .)
    DEFAULT         reduce using rule 14 (instrucciones -> estrcontrol .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    estrcontrol                    shift and go to state 45
    instrucciones                  shift and go to state 46
    instruccion                    shift and go to state 7
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 46

    (15) instrucciones -> estrcontrol instrucciones .

    $end            reduce using rule 15 (instrucciones -> estrcontrol instrucciones .)
    LDER            reduce using rule 15 (instrucciones -> estrcontrol instrucciones .)
    CASE            reduce using rule 15 (instrucciones -> estrcontrol instrucciones .)
    DEFAULT         reduce using rule 15 (instrucciones -> estrcontrol instrucciones .)


state 47

    (7) instrucciones -> instruccion PUNTOYCOMA .
    (8) instrucciones -> instruccion PUNTOYCOMA . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    $end            reduce using rule 7 (instrucciones -> instruccion PUNTOYCOMA .)
    LDER            reduce using rule 7 (instrucciones -> instruccion PUNTOYCOMA .)
    CASE            reduce using rule 7 (instrucciones -> instruccion PUNTOYCOMA .)
    DEFAULT         reduce using rule 7 (instrucciones -> instruccion PUNTOYCOMA .)
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instruccion                    shift and go to state 7
    instrucciones                  shift and go to state 93
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 48

    (9) instrucciones -> BREAK PUNTOYCOMA .

    $end            reduce using rule 9 (instrucciones -> BREAK PUNTOYCOMA .)
    LDER            reduce using rule 9 (instrucciones -> BREAK PUNTOYCOMA .)
    CASE            reduce using rule 9 (instrucciones -> BREAK PUNTOYCOMA .)
    DEFAULT         reduce using rule 9 (instrucciones -> BREAK PUNTOYCOMA .)


state 49

    (10) instrucciones -> CONTINUE PUNTOYCOMA .

    $end            reduce using rule 10 (instrucciones -> CONTINUE PUNTOYCOMA .)
    LDER            reduce using rule 10 (instrucciones -> CONTINUE PUNTOYCOMA .)
    CASE            reduce using rule 10 (instrucciones -> CONTINUE PUNTOYCOMA .)
    DEFAULT         reduce using rule 10 (instrucciones -> CONTINUE PUNTOYCOMA .)


state 50

    (11) instrucciones -> RETURN VARIABLE . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 94


state 51

    (13) instrucciones -> VARIABLE INSTANCEOF . VARIABLE

    VARIABLE        shift and go to state 95


state 52

    (110) llamarfuncion -> VARIABLE PIZQ . argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> VARIABLE PIZQ . PDER PUNTOYCOMA
    (112) argumentos -> . VARIABLE
    (113) argumentos -> . VARIABLE COMA argumentos

    PDER            shift and go to state 98
    VARIABLE        shift and go to state 96

    argumentos                     shift and go to state 97

state 53

    (61) asignacion -> VARIABLE IGUAL . expression
    (62) asignacion -> VARIABLE IGUAL . comparacion
    (63) asignacion -> VARIABLE IGUAL . valor
    (64) asignacion -> VARIABLE IGUAL . llamarfuncion
    (65) asignacion -> VARIABLE IGUAL . dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (36) valor -> . ENTERO
    (37) valor -> . FLOAT
    (38) valor -> . STRING
    (39) valor -> . BOOL
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (66) dec_array -> . CIZQ array_enteros CDER
    (67) dec_array -> . CIZQ array_flotante CDER
    (68) dec_array -> . CIZQ array_string CDER
    (69) dec_array -> . CIZQ array_boolean CDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 99
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 105
    ENTERO          shift and go to state 106
    FLOAT           shift and go to state 107
    BOOL            shift and go to state 108
    CIZQ            shift and go to state 109

    expression                     shift and go to state 100
    comparacion                    shift and go to state 101
    valor                          shift and go to state 102
    llamarfuncion                  shift and go to state 103
    dec_array                      shift and go to state 104
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 54

    (92) expression -> VARIABLE SUMA . VARIABLE

    VARIABLE        shift and go to state 110


state 55

    (94) expression -> VARIABLE RESTA . VARIABLE
    (100) term -> VARIABLE RESTA . VARIABLE

    VARIABLE        shift and go to state 111


state 56

    (82) comparacion -> VARIABLE comparador . ENTERO

    ENTERO          shift and go to state 112


state 57

    (89) operadores -> VARIABLE DSUMA .

    PUNTOYCOMA      reduce using rule 89 (operadores -> VARIABLE DSUMA .)
    PDER            reduce using rule 89 (operadores -> VARIABLE DSUMA .)


state 58

    (90) operadores -> VARIABLE DRESTA .

    PUNTOYCOMA      reduce using rule 90 (operadores -> VARIABLE DRESTA .)
    PDER            reduce using rule 90 (operadores -> VARIABLE DRESTA .)


state 59

    (98) term -> VARIABLE MULTI . VARIABLE

    VARIABLE        shift and go to state 113


state 60

    (83) comparador -> MAYOR .

    ENTERO          reduce using rule 83 (comparador -> MAYOR .)
    VARIABLE        reduce using rule 83 (comparador -> MAYOR .)
    PIZQ            reduce using rule 83 (comparador -> MAYOR .)
    LIZQ            reduce using rule 83 (comparador -> MAYOR .)
    FLOAT           reduce using rule 83 (comparador -> MAYOR .)


state 61

    (84) comparador -> MENOR .

    ENTERO          reduce using rule 84 (comparador -> MENOR .)
    VARIABLE        reduce using rule 84 (comparador -> MENOR .)
    PIZQ            reduce using rule 84 (comparador -> MENOR .)
    LIZQ            reduce using rule 84 (comparador -> MENOR .)
    FLOAT           reduce using rule 84 (comparador -> MENOR .)


state 62

    (85) comparador -> MAYIGUAL .

    ENTERO          reduce using rule 85 (comparador -> MAYIGUAL .)
    VARIABLE        reduce using rule 85 (comparador -> MAYIGUAL .)
    PIZQ            reduce using rule 85 (comparador -> MAYIGUAL .)
    LIZQ            reduce using rule 85 (comparador -> MAYIGUAL .)
    FLOAT           reduce using rule 85 (comparador -> MAYIGUAL .)


state 63

    (86) comparador -> MENIGUAL .

    ENTERO          reduce using rule 86 (comparador -> MENIGUAL .)
    VARIABLE        reduce using rule 86 (comparador -> MENIGUAL .)
    PIZQ            reduce using rule 86 (comparador -> MENIGUAL .)
    LIZQ            reduce using rule 86 (comparador -> MENIGUAL .)
    FLOAT           reduce using rule 86 (comparador -> MENIGUAL .)


state 64

    (87) comparador -> DIGUAL .

    ENTERO          reduce using rule 87 (comparador -> DIGUAL .)
    VARIABLE        reduce using rule 87 (comparador -> DIGUAL .)
    PIZQ            reduce using rule 87 (comparador -> DIGUAL .)
    LIZQ            reduce using rule 87 (comparador -> DIGUAL .)
    FLOAT           reduce using rule 87 (comparador -> DIGUAL .)


state 65

    (88) comparador -> NOIGUAL .

    ENTERO          reduce using rule 88 (comparador -> NOIGUAL .)
    VARIABLE        reduce using rule 88 (comparador -> NOIGUAL .)
    PIZQ            reduce using rule 88 (comparador -> NOIGUAL .)
    LIZQ            reduce using rule 88 (comparador -> NOIGUAL .)
    FLOAT           reduce using rule 88 (comparador -> NOIGUAL .)


state 66

    (12) instrucciones -> TYPEOF VARIABLE .

    $end            reduce using rule 12 (instrucciones -> TYPEOF VARIABLE .)
    LDER            reduce using rule 12 (instrucciones -> TYPEOF VARIABLE .)
    CASE            reduce using rule 12 (instrucciones -> TYPEOF VARIABLE .)
    DEFAULT         reduce using rule 12 (instrucciones -> TYPEOF VARIABLE .)


state 67

    (17) instrucciones -> llamarfuncion instrucciones .

    $end            reduce using rule 17 (instrucciones -> llamarfuncion instrucciones .)
    LDER            reduce using rule 17 (instrucciones -> llamarfuncion instrucciones .)
    CASE            reduce using rule 17 (instrucciones -> llamarfuncion instrucciones .)
    DEFAULT         reduce using rule 17 (instrucciones -> llamarfuncion instrucciones .)


state 68

    (19) instrucciones -> trycatch instrucciones .

    $end            reduce using rule 19 (instrucciones -> trycatch instrucciones .)
    LDER            reduce using rule 19 (instrucciones -> trycatch instrucciones .)
    CASE            reduce using rule 19 (instrucciones -> trycatch instrucciones .)
    DEFAULT         reduce using rule 19 (instrucciones -> trycatch instrucciones .)


state 69

    (106) funcion -> FUNCTION VARIABLE . PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> FUNCTION VARIABLE . PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> FUNCTION VARIABLE . PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> FUNCTION VARIABLE . PIZQ PDER LIZQ LDER

    PIZQ            shift and go to state 114


state 70

    (104) expression -> PIZQ expression . PDER
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term

    PDER            shift and go to state 115
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76


state 71

    (92) expression -> VARIABLE . SUMA VARIABLE
    (94) expression -> VARIABLE . RESTA VARIABLE
    (96) expression -> VARIABLE .
    (98) term -> VARIABLE . MULTI VARIABLE
    (100) term -> VARIABLE . RESTA VARIABLE

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    PDER            reduce using rule 96 (expression -> VARIABLE .)
    LDER            reduce using rule 96 (expression -> VARIABLE .)
    DAMPERSAND      reduce using rule 96 (expression -> VARIABLE .)
    DTUBO           reduce using rule 96 (expression -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 96 (expression -> VARIABLE .)
    MULTI           shift and go to state 59

  ! SUMA            [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! RESTA           [ reduce using rule 96 (expression -> VARIABLE .) ]


state 72

    (105) expression -> LIZQ expression . LDER
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term

    LDER            shift and go to state 116
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76


state 73

    (128) def_clase -> CLASS VARIABLE . LIZQ cuerpo_class LDER
    (129) def_clase -> CLASS VARIABLE . LIZQ LDER

    LIZQ            shift and go to state 117


state 74

    (114) constructor -> CONSTRUCTOR PIZQ . argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> CONSTRUCTOR PIZQ . PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> CONSTRUCTOR PIZQ . PDER LIZQ LDER
    (112) argumentos -> . VARIABLE
    (113) argumentos -> . VARIABLE COMA argumentos

    PDER            shift and go to state 119
    VARIABLE        shift and go to state 96

    argumentos                     shift and go to state 118

state 75

    (91) expression -> expression SUMA . term
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 121
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    term                           shift and go to state 120
    factor                         shift and go to state 43

state 76

    (93) expression -> expression RESTA . term
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 121
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    term                           shift and go to state 122
    factor                         shift and go to state 43

state 77

    (78) comparacion -> expression comparador . expression
    (79) comparacion -> expression comparador . expression DAMPERSAND comparacion
    (80) comparacion -> expression comparador . expression DTUBO comparacion
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    VARIABLE        shift and go to state 71
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    expression                     shift and go to state 123
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 78

    (58) trycatch -> TRY LIZQ . instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> TRY LIZQ . instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ . instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 124
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 79

    (40) if -> IF PIZQ . comparacion PDER LIZQ instrucciones LDER
    (41) if -> IF PIZQ . comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> IF PIZQ . comparacion PDER LIZQ instrucciones LDER else
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 125
    expression                     shift and go to state 126
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 80

    (48) for -> FOR PIZQ . declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR PIZQ . declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> FOR PIZQ . declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE

    VAR             shift and go to state 130
    LET             shift and go to state 131
    CONST           shift and go to state 42

    declaasig                      shift and go to state 128
    declaracion                    shift and go to state 129

state 81

    (51) while -> WHILE PIZQ . comparacion PDER LIZQ instrucciones LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 132
    expression                     shift and go to state 126
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 82

    (52) dowhile -> DO LIZQ . instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 133
    comparacion                    shift and go to state 27
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 83

    (53) switch -> SWITCH PIZQ . VARIABLE PDER LIZQ cases LDER

    VARIABLE        shift and go to state 134


state 84

    (97) term -> term MULTI . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    factor                         shift and go to state 135

state 85

    (99) term -> term DIV . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    factor                         shift and go to state 136

state 86

    (81) comparacion -> STRING DIGUAL . STRING

    STRING          shift and go to state 137


state 87

    (26) declaracion -> VAR VARIABLE .
    (61) asignacion -> VARIABLE . IGUAL expression
    (62) asignacion -> VARIABLE . IGUAL comparacion
    (63) asignacion -> VARIABLE . IGUAL valor
    (64) asignacion -> VARIABLE . IGUAL llamarfuncion
    (65) asignacion -> VARIABLE . IGUAL dec_array

    PUNTOYCOMA      reduce using rule 26 (declaracion -> VAR VARIABLE .)
    IN              reduce using rule 26 (declaracion -> VAR VARIABLE .)
    IGUAL           shift and go to state 53


state 88

    (28) declaasig -> VAR asignacion .

    PUNTOYCOMA      reduce using rule 28 (declaasig -> VAR asignacion .)


state 89

    (27) declaracion -> LET VARIABLE .
    (61) asignacion -> VARIABLE . IGUAL expression
    (62) asignacion -> VARIABLE . IGUAL comparacion
    (63) asignacion -> VARIABLE . IGUAL valor
    (64) asignacion -> VARIABLE . IGUAL llamarfuncion
    (65) asignacion -> VARIABLE . IGUAL dec_array

    PUNTOYCOMA      reduce using rule 27 (declaracion -> LET VARIABLE .)
    IN              reduce using rule 27 (declaracion -> LET VARIABLE .)
    IGUAL           shift and go to state 53


state 90

    (29) declaasig -> LET asignacion .

    PUNTOYCOMA      reduce using rule 29 (declaasig -> LET asignacion .)


state 91

    (30) declaasig -> CONST asignacion .

    PUNTOYCOMA      reduce using rule 30 (declaasig -> CONST asignacion .)


state 92

    (61) asignacion -> VARIABLE . IGUAL expression
    (62) asignacion -> VARIABLE . IGUAL comparacion
    (63) asignacion -> VARIABLE . IGUAL valor
    (64) asignacion -> VARIABLE . IGUAL llamarfuncion
    (65) asignacion -> VARIABLE . IGUAL dec_array

    IGUAL           shift and go to state 53


state 93

    (8) instrucciones -> instruccion PUNTOYCOMA instrucciones .

    $end            reduce using rule 8 (instrucciones -> instruccion PUNTOYCOMA instrucciones .)
    LDER            reduce using rule 8 (instrucciones -> instruccion PUNTOYCOMA instrucciones .)
    CASE            reduce using rule 8 (instrucciones -> instruccion PUNTOYCOMA instrucciones .)
    DEFAULT         reduce using rule 8 (instrucciones -> instruccion PUNTOYCOMA instrucciones .)


state 94

    (11) instrucciones -> RETURN VARIABLE PUNTOYCOMA .

    $end            reduce using rule 11 (instrucciones -> RETURN VARIABLE PUNTOYCOMA .)
    LDER            reduce using rule 11 (instrucciones -> RETURN VARIABLE PUNTOYCOMA .)
    CASE            reduce using rule 11 (instrucciones -> RETURN VARIABLE PUNTOYCOMA .)
    DEFAULT         reduce using rule 11 (instrucciones -> RETURN VARIABLE PUNTOYCOMA .)


state 95

    (13) instrucciones -> VARIABLE INSTANCEOF VARIABLE .

    $end            reduce using rule 13 (instrucciones -> VARIABLE INSTANCEOF VARIABLE .)
    LDER            reduce using rule 13 (instrucciones -> VARIABLE INSTANCEOF VARIABLE .)
    CASE            reduce using rule 13 (instrucciones -> VARIABLE INSTANCEOF VARIABLE .)
    DEFAULT         reduce using rule 13 (instrucciones -> VARIABLE INSTANCEOF VARIABLE .)


state 96

    (112) argumentos -> VARIABLE .
    (113) argumentos -> VARIABLE . COMA argumentos

    PDER            reduce using rule 112 (argumentos -> VARIABLE .)
    COMA            shift and go to state 138


state 97

    (110) llamarfuncion -> VARIABLE PIZQ argumentos . PDER PUNTOYCOMA

    PDER            shift and go to state 139


state 98

    (111) llamarfuncion -> VARIABLE PIZQ PDER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 140


state 99

    (92) expression -> VARIABLE . SUMA VARIABLE
    (94) expression -> VARIABLE . RESTA VARIABLE
    (96) expression -> VARIABLE .
    (82) comparacion -> VARIABLE . comparador ENTERO
    (110) llamarfuncion -> VARIABLE . PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> VARIABLE . PIZQ PDER PUNTOYCOMA
    (98) term -> VARIABLE . MULTI VARIABLE
    (100) term -> VARIABLE . RESTA VARIABLE
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYIGUAL resolved as shift
  ! shift/reduce conflict for MENIGUAL resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    PUNTOYCOMA      reduce using rule 96 (expression -> VARIABLE .)
    PDER            reduce using rule 96 (expression -> VARIABLE .)
    PIZQ            shift and go to state 52
    MULTI           shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

  ! SUMA            [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! RESTA           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! DIGUAL          [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! NOIGUAL         [ reduce using rule 96 (expression -> VARIABLE .) ]

    comparador                     shift and go to state 56

state 100

    (61) asignacion -> VARIABLE IGUAL expression .
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term
    (78) comparacion -> expression . comparador expression
    (79) comparacion -> expression . comparador expression DAMPERSAND comparacion
    (80) comparacion -> expression . comparador expression DTUBO comparacion
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

    PUNTOYCOMA      reduce using rule 61 (asignacion -> VARIABLE IGUAL expression .)
    PDER            reduce using rule 61 (asignacion -> VARIABLE IGUAL expression .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

    comparador                     shift and go to state 77

state 101

    (62) asignacion -> VARIABLE IGUAL comparacion .

    PUNTOYCOMA      reduce using rule 62 (asignacion -> VARIABLE IGUAL comparacion .)
    PDER            reduce using rule 62 (asignacion -> VARIABLE IGUAL comparacion .)


state 102

    (63) asignacion -> VARIABLE IGUAL valor .

    PUNTOYCOMA      reduce using rule 63 (asignacion -> VARIABLE IGUAL valor .)
    PDER            reduce using rule 63 (asignacion -> VARIABLE IGUAL valor .)


state 103

    (64) asignacion -> VARIABLE IGUAL llamarfuncion .

    PUNTOYCOMA      reduce using rule 64 (asignacion -> VARIABLE IGUAL llamarfuncion .)
    PDER            reduce using rule 64 (asignacion -> VARIABLE IGUAL llamarfuncion .)


state 104

    (65) asignacion -> VARIABLE IGUAL dec_array .

    PUNTOYCOMA      reduce using rule 65 (asignacion -> VARIABLE IGUAL dec_array .)
    PDER            reduce using rule 65 (asignacion -> VARIABLE IGUAL dec_array .)


state 105

    (81) comparacion -> STRING . DIGUAL STRING
    (38) valor -> STRING .

    DIGUAL          shift and go to state 86
    PUNTOYCOMA      reduce using rule 38 (valor -> STRING .)
    PDER            reduce using rule 38 (valor -> STRING .)


state 106

    (36) valor -> ENTERO .
    (102) factor -> ENTERO .

  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 36 (valor -> ENTERO .)
  ! reduce/reduce conflict for PDER resolved using rule 36 (valor -> ENTERO .)
    PUNTOYCOMA      reduce using rule 36 (valor -> ENTERO .)
    PDER            reduce using rule 36 (valor -> ENTERO .)
    MULTI           reduce using rule 102 (factor -> ENTERO .)
    DIV             reduce using rule 102 (factor -> ENTERO .)
    SUMA            reduce using rule 102 (factor -> ENTERO .)
    RESTA           reduce using rule 102 (factor -> ENTERO .)
    MAYOR           reduce using rule 102 (factor -> ENTERO .)
    MENOR           reduce using rule 102 (factor -> ENTERO .)
    MAYIGUAL        reduce using rule 102 (factor -> ENTERO .)
    MENIGUAL        reduce using rule 102 (factor -> ENTERO .)
    DIGUAL          reduce using rule 102 (factor -> ENTERO .)
    NOIGUAL         reduce using rule 102 (factor -> ENTERO .)

  ! PUNTOYCOMA      [ reduce using rule 102 (factor -> ENTERO .) ]
  ! PDER            [ reduce using rule 102 (factor -> ENTERO .) ]


state 107

    (37) valor -> FLOAT .
    (103) factor -> FLOAT .

  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 37 (valor -> FLOAT .)
  ! reduce/reduce conflict for PDER resolved using rule 37 (valor -> FLOAT .)
    PUNTOYCOMA      reduce using rule 37 (valor -> FLOAT .)
    PDER            reduce using rule 37 (valor -> FLOAT .)
    MULTI           reduce using rule 103 (factor -> FLOAT .)
    DIV             reduce using rule 103 (factor -> FLOAT .)
    SUMA            reduce using rule 103 (factor -> FLOAT .)
    RESTA           reduce using rule 103 (factor -> FLOAT .)
    MAYOR           reduce using rule 103 (factor -> FLOAT .)
    MENOR           reduce using rule 103 (factor -> FLOAT .)
    MAYIGUAL        reduce using rule 103 (factor -> FLOAT .)
    MENIGUAL        reduce using rule 103 (factor -> FLOAT .)
    DIGUAL          reduce using rule 103 (factor -> FLOAT .)
    NOIGUAL         reduce using rule 103 (factor -> FLOAT .)

  ! PUNTOYCOMA      [ reduce using rule 103 (factor -> FLOAT .) ]
  ! PDER            [ reduce using rule 103 (factor -> FLOAT .) ]


state 108

    (39) valor -> BOOL .

    PUNTOYCOMA      reduce using rule 39 (valor -> BOOL .)
    PDER            reduce using rule 39 (valor -> BOOL .)
    LDER            reduce using rule 39 (valor -> BOOL .)


state 109

    (66) dec_array -> CIZQ . array_enteros CDER
    (67) dec_array -> CIZQ . array_flotante CDER
    (68) dec_array -> CIZQ . array_string CDER
    (69) dec_array -> CIZQ . array_boolean CDER
    (70) array_enteros -> . ENTERO
    (71) array_enteros -> . ENTERO COMA array_enteros
    (72) array_flotante -> . FLOAT
    (73) array_flotante -> . FLOAT COMA array_flotante
    (74) array_string -> . STRING
    (75) array_string -> . STRING COMA array_string
    (76) array_boolean -> . BOOL
    (77) array_boolean -> . BOOL COMA array_boolean

    ENTERO          shift and go to state 145
    FLOAT           shift and go to state 146
    STRING          shift and go to state 147
    BOOL            shift and go to state 148

    array_enteros                  shift and go to state 141
    array_flotante                 shift and go to state 142
    array_string                   shift and go to state 143
    array_boolean                  shift and go to state 144

state 110

    (92) expression -> VARIABLE SUMA VARIABLE .

    SUMA            reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    RESTA           reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    MAYOR           reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    MENOR           reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    MAYIGUAL        reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    MENIGUAL        reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    DIGUAL          reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    NOIGUAL         reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    PUNTOYCOMA      reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    PDER            reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    LDER            reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    DAMPERSAND      reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)
    DTUBO           reduce using rule 92 (expression -> VARIABLE SUMA VARIABLE .)


state 111

    (94) expression -> VARIABLE RESTA VARIABLE .
    (100) term -> VARIABLE RESTA VARIABLE .

  ! reduce/reduce conflict for SUMA resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for RESTA resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for MAYOR resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for MAYIGUAL resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for MENIGUAL resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for DIGUAL resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for NOIGUAL resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for PDER resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for LDER resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for DAMPERSAND resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
  ! reduce/reduce conflict for DTUBO resolved using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    SUMA            reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    RESTA           reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    MAYOR           reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    MENOR           reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    MAYIGUAL        reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    MENIGUAL        reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    DIGUAL          reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    NOIGUAL         reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    PUNTOYCOMA      reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    PDER            reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    LDER            reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    DAMPERSAND      reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    DTUBO           reduce using rule 94 (expression -> VARIABLE RESTA VARIABLE .)
    MULTI           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    DIV             reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)

  ! SUMA            [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! RESTA           [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! MAYOR           [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! MENOR           [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! MAYIGUAL        [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! MENIGUAL        [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! DIGUAL          [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! NOIGUAL         [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! PUNTOYCOMA      [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! PDER            [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! LDER            [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! DAMPERSAND      [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]
  ! DTUBO           [ reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .) ]


state 112

    (82) comparacion -> VARIABLE comparador ENTERO .

    PUNTOYCOMA      reduce using rule 82 (comparacion -> VARIABLE comparador ENTERO .)
    PDER            reduce using rule 82 (comparacion -> VARIABLE comparador ENTERO .)


state 113

    (98) term -> VARIABLE MULTI VARIABLE .

    MULTI           reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    DIV             reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    SUMA            reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    RESTA           reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    MAYOR           reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    MENOR           reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    MAYIGUAL        reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    MENIGUAL        reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    DIGUAL          reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    NOIGUAL         reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    PUNTOYCOMA      reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    PDER            reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    LDER            reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    DAMPERSAND      reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)
    DTUBO           reduce using rule 98 (term -> VARIABLE MULTI VARIABLE .)


state 114

    (106) funcion -> FUNCTION VARIABLE PIZQ . argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> FUNCTION VARIABLE PIZQ . argumentos PDER LIZQ LDER
    (108) funcion -> FUNCTION VARIABLE PIZQ . PDER LIZQ instrucciones LDER
    (109) funcion -> FUNCTION VARIABLE PIZQ . PDER LIZQ LDER
    (112) argumentos -> . VARIABLE
    (113) argumentos -> . VARIABLE COMA argumentos

    PDER            shift and go to state 150
    VARIABLE        shift and go to state 96

    argumentos                     shift and go to state 149

state 115

    (104) expression -> PIZQ expression PDER .

    SUMA            reduce using rule 104 (expression -> PIZQ expression PDER .)
    RESTA           reduce using rule 104 (expression -> PIZQ expression PDER .)
    MAYOR           reduce using rule 104 (expression -> PIZQ expression PDER .)
    MENOR           reduce using rule 104 (expression -> PIZQ expression PDER .)
    MAYIGUAL        reduce using rule 104 (expression -> PIZQ expression PDER .)
    MENIGUAL        reduce using rule 104 (expression -> PIZQ expression PDER .)
    DIGUAL          reduce using rule 104 (expression -> PIZQ expression PDER .)
    NOIGUAL         reduce using rule 104 (expression -> PIZQ expression PDER .)
    PUNTOYCOMA      reduce using rule 104 (expression -> PIZQ expression PDER .)
    PDER            reduce using rule 104 (expression -> PIZQ expression PDER .)
    LDER            reduce using rule 104 (expression -> PIZQ expression PDER .)
    DAMPERSAND      reduce using rule 104 (expression -> PIZQ expression PDER .)
    DTUBO           reduce using rule 104 (expression -> PIZQ expression PDER .)


state 116

    (105) expression -> LIZQ expression LDER .

    SUMA            reduce using rule 105 (expression -> LIZQ expression LDER .)
    RESTA           reduce using rule 105 (expression -> LIZQ expression LDER .)
    MAYOR           reduce using rule 105 (expression -> LIZQ expression LDER .)
    MENOR           reduce using rule 105 (expression -> LIZQ expression LDER .)
    MAYIGUAL        reduce using rule 105 (expression -> LIZQ expression LDER .)
    MENIGUAL        reduce using rule 105 (expression -> LIZQ expression LDER .)
    DIGUAL          reduce using rule 105 (expression -> LIZQ expression LDER .)
    NOIGUAL         reduce using rule 105 (expression -> LIZQ expression LDER .)
    PUNTOYCOMA      reduce using rule 105 (expression -> LIZQ expression LDER .)
    PDER            reduce using rule 105 (expression -> LIZQ expression LDER .)
    LDER            reduce using rule 105 (expression -> LIZQ expression LDER .)
    DAMPERSAND      reduce using rule 105 (expression -> LIZQ expression LDER .)
    DTUBO           reduce using rule 105 (expression -> LIZQ expression LDER .)


state 117

    (128) def_clase -> CLASS VARIABLE LIZQ . cuerpo_class LDER
    (129) def_clase -> CLASS VARIABLE LIZQ . LDER
    (125) cuerpo_class -> . metodos_class
    (126) cuerpo_class -> . constructor
    (127) cuerpo_class -> . constructor metodos_class
    (123) metodos_class -> . funcion
    (124) metodos_class -> . funcion metodos_class
    (114) constructor -> . CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ LDER
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER

    LDER            shift and go to state 152
    CONSTRUCTOR     shift and go to state 24
    FUNCTION        shift and go to state 15

    cuerpo_class                   shift and go to state 151
    metodos_class                  shift and go to state 153
    constructor                    shift and go to state 154
    funcion                        shift and go to state 155

state 118

    (114) constructor -> CONSTRUCTOR PIZQ argumentos . PDER LIZQ metodo_cuerpo_class LDER

    PDER            shift and go to state 156


state 119

    (115) constructor -> CONSTRUCTOR PIZQ PDER . LIZQ metodo_cuerpo_class LDER
    (116) constructor -> CONSTRUCTOR PIZQ PDER . LIZQ LDER

    LIZQ            shift and go to state 157


state 120

    (91) expression -> expression SUMA term .
    (97) term -> term . MULTI factor
    (99) term -> term . DIV factor

    SUMA            reduce using rule 91 (expression -> expression SUMA term .)
    RESTA           reduce using rule 91 (expression -> expression SUMA term .)
    MAYOR           reduce using rule 91 (expression -> expression SUMA term .)
    MENOR           reduce using rule 91 (expression -> expression SUMA term .)
    MAYIGUAL        reduce using rule 91 (expression -> expression SUMA term .)
    MENIGUAL        reduce using rule 91 (expression -> expression SUMA term .)
    DIGUAL          reduce using rule 91 (expression -> expression SUMA term .)
    NOIGUAL         reduce using rule 91 (expression -> expression SUMA term .)
    PUNTOYCOMA      reduce using rule 91 (expression -> expression SUMA term .)
    PDER            reduce using rule 91 (expression -> expression SUMA term .)
    LDER            reduce using rule 91 (expression -> expression SUMA term .)
    DAMPERSAND      reduce using rule 91 (expression -> expression SUMA term .)
    DTUBO           reduce using rule 91 (expression -> expression SUMA term .)
    MULTI           shift and go to state 84
    DIV             shift and go to state 85


state 121

    (98) term -> VARIABLE . MULTI VARIABLE
    (100) term -> VARIABLE . RESTA VARIABLE

    MULTI           shift and go to state 59
    RESTA           shift and go to state 158


state 122

    (93) expression -> expression RESTA term .
    (97) term -> term . MULTI factor
    (99) term -> term . DIV factor

    SUMA            reduce using rule 93 (expression -> expression RESTA term .)
    RESTA           reduce using rule 93 (expression -> expression RESTA term .)
    MAYOR           reduce using rule 93 (expression -> expression RESTA term .)
    MENOR           reduce using rule 93 (expression -> expression RESTA term .)
    MAYIGUAL        reduce using rule 93 (expression -> expression RESTA term .)
    MENIGUAL        reduce using rule 93 (expression -> expression RESTA term .)
    DIGUAL          reduce using rule 93 (expression -> expression RESTA term .)
    NOIGUAL         reduce using rule 93 (expression -> expression RESTA term .)
    PUNTOYCOMA      reduce using rule 93 (expression -> expression RESTA term .)
    PDER            reduce using rule 93 (expression -> expression RESTA term .)
    LDER            reduce using rule 93 (expression -> expression RESTA term .)
    DAMPERSAND      reduce using rule 93 (expression -> expression RESTA term .)
    DTUBO           reduce using rule 93 (expression -> expression RESTA term .)
    MULTI           shift and go to state 84
    DIV             shift and go to state 85


state 123

    (78) comparacion -> expression comparador expression .
    (79) comparacion -> expression comparador expression . DAMPERSAND comparacion
    (80) comparacion -> expression comparador expression . DTUBO comparacion
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term

    PUNTOYCOMA      reduce using rule 78 (comparacion -> expression comparador expression .)
    PDER            reduce using rule 78 (comparacion -> expression comparador expression .)
    DAMPERSAND      shift and go to state 159
    DTUBO           shift and go to state 160
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76


state 124

    (58) trycatch -> TRY LIZQ instrucciones . LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> TRY LIZQ instrucciones . LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones . LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    LDER            shift and go to state 161


state 125

    (40) if -> IF PIZQ comparacion . PDER LIZQ instrucciones LDER
    (41) if -> IF PIZQ comparacion . PDER LIZQ instrucciones LDER elseif
    (42) if -> IF PIZQ comparacion . PDER LIZQ instrucciones LDER else

    PDER            shift and go to state 162


state 126

    (78) comparacion -> expression . comparador expression
    (79) comparacion -> expression . comparador expression DAMPERSAND comparacion
    (80) comparacion -> expression . comparador expression DTUBO comparacion
    (91) expression -> expression . SUMA term
    (93) expression -> expression . RESTA term
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

    comparador                     shift and go to state 77

state 127

    (82) comparacion -> VARIABLE . comparador ENTERO
    (92) expression -> VARIABLE . SUMA VARIABLE
    (94) expression -> VARIABLE . RESTA VARIABLE
    (96) expression -> VARIABLE .
    (98) term -> VARIABLE . MULTI VARIABLE
    (100) term -> VARIABLE . RESTA VARIABLE
    (83) comparador -> . MAYOR
    (84) comparador -> . MENOR
    (85) comparador -> . MAYIGUAL
    (86) comparador -> . MENIGUAL
    (87) comparador -> . DIGUAL
    (88) comparador -> . NOIGUAL

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYIGUAL resolved as shift
  ! shift/reduce conflict for MENIGUAL resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    MULTI           shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYIGUAL        shift and go to state 62
    MENIGUAL        shift and go to state 63
    DIGUAL          shift and go to state 64
    NOIGUAL         shift and go to state 65

  ! SUMA            [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! RESTA           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MAYIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! MENIGUAL        [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! DIGUAL          [ reduce using rule 96 (expression -> VARIABLE .) ]
  ! NOIGUAL         [ reduce using rule 96 (expression -> VARIABLE .) ]

    comparador                     shift and go to state 56

state 128

    (48) for -> FOR PIZQ declaasig . PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR PIZQ declaasig . PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER

    PUNTOYCOMA      shift and go to state 163


state 129

    (50) for -> FOR PIZQ declaracion . IN VARIABLE PDER LIZQ instrucciones LDER

    IN              shift and go to state 164


state 130

    (28) declaasig -> VAR . asignacion
    (26) declaracion -> VAR . VARIABLE
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 87

    asignacion                     shift and go to state 88

state 131

    (29) declaasig -> LET . asignacion
    (27) declaracion -> LET . VARIABLE
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 89

    asignacion                     shift and go to state 90

state 132

    (51) while -> WHILE PIZQ comparacion . PDER LIZQ instrucciones LDER

    PDER            shift and go to state 165


state 133

    (52) dowhile -> DO LIZQ instrucciones . LDER WHILE PIZQ comparacion PDER PUNTOYCOMA

    LDER            shift and go to state 166


state 134

    (53) switch -> SWITCH PIZQ VARIABLE . PDER LIZQ cases LDER

    PDER            shift and go to state 167


state 135

    (97) term -> term MULTI factor .

    MULTI           reduce using rule 97 (term -> term MULTI factor .)
    DIV             reduce using rule 97 (term -> term MULTI factor .)
    SUMA            reduce using rule 97 (term -> term MULTI factor .)
    RESTA           reduce using rule 97 (term -> term MULTI factor .)
    MAYOR           reduce using rule 97 (term -> term MULTI factor .)
    MENOR           reduce using rule 97 (term -> term MULTI factor .)
    MAYIGUAL        reduce using rule 97 (term -> term MULTI factor .)
    MENIGUAL        reduce using rule 97 (term -> term MULTI factor .)
    DIGUAL          reduce using rule 97 (term -> term MULTI factor .)
    NOIGUAL         reduce using rule 97 (term -> term MULTI factor .)
    PUNTOYCOMA      reduce using rule 97 (term -> term MULTI factor .)
    PDER            reduce using rule 97 (term -> term MULTI factor .)
    LDER            reduce using rule 97 (term -> term MULTI factor .)
    DAMPERSAND      reduce using rule 97 (term -> term MULTI factor .)
    DTUBO           reduce using rule 97 (term -> term MULTI factor .)


state 136

    (99) term -> term DIV factor .

    MULTI           reduce using rule 99 (term -> term DIV factor .)
    DIV             reduce using rule 99 (term -> term DIV factor .)
    SUMA            reduce using rule 99 (term -> term DIV factor .)
    RESTA           reduce using rule 99 (term -> term DIV factor .)
    MAYOR           reduce using rule 99 (term -> term DIV factor .)
    MENOR           reduce using rule 99 (term -> term DIV factor .)
    MAYIGUAL        reduce using rule 99 (term -> term DIV factor .)
    MENIGUAL        reduce using rule 99 (term -> term DIV factor .)
    DIGUAL          reduce using rule 99 (term -> term DIV factor .)
    NOIGUAL         reduce using rule 99 (term -> term DIV factor .)
    PUNTOYCOMA      reduce using rule 99 (term -> term DIV factor .)
    PDER            reduce using rule 99 (term -> term DIV factor .)
    LDER            reduce using rule 99 (term -> term DIV factor .)
    DAMPERSAND      reduce using rule 99 (term -> term DIV factor .)
    DTUBO           reduce using rule 99 (term -> term DIV factor .)


state 137

    (81) comparacion -> STRING DIGUAL STRING .

    PUNTOYCOMA      reduce using rule 81 (comparacion -> STRING DIGUAL STRING .)
    PDER            reduce using rule 81 (comparacion -> STRING DIGUAL STRING .)


state 138

    (113) argumentos -> VARIABLE COMA . argumentos
    (112) argumentos -> . VARIABLE
    (113) argumentos -> . VARIABLE COMA argumentos

    VARIABLE        shift and go to state 96

    argumentos                     shift and go to state 168

state 139

    (110) llamarfuncion -> VARIABLE PIZQ argumentos PDER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 169


state 140

    (111) llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .

    BREAK           reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    CONTINUE        reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    RETURN          reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    TYPEOF          reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    VARIABLE        reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    TRY             reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    PIZQ            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    LIZQ            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    STRING          reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    VAR             reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    LET             reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    CONST           reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    IF              reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    FOR             reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    WHILE           reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    DO              reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    SWITCH          reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    ENTERO          reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    FLOAT           reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    $end            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    LDER            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    CASE            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    DEFAULT         reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)
    PDER            reduce using rule 111 (llamarfuncion -> VARIABLE PIZQ PDER PUNTOYCOMA .)


state 141

    (66) dec_array -> CIZQ array_enteros . CDER

    CDER            shift and go to state 170


state 142

    (67) dec_array -> CIZQ array_flotante . CDER

    CDER            shift and go to state 171


state 143

    (68) dec_array -> CIZQ array_string . CDER

    CDER            shift and go to state 172


state 144

    (69) dec_array -> CIZQ array_boolean . CDER

    CDER            shift and go to state 173


state 145

    (70) array_enteros -> ENTERO .
    (71) array_enteros -> ENTERO . COMA array_enteros

    CDER            reduce using rule 70 (array_enteros -> ENTERO .)
    COMA            shift and go to state 174


state 146

    (72) array_flotante -> FLOAT .
    (73) array_flotante -> FLOAT . COMA array_flotante

    CDER            reduce using rule 72 (array_flotante -> FLOAT .)
    COMA            shift and go to state 175


state 147

    (74) array_string -> STRING .
    (75) array_string -> STRING . COMA array_string

    CDER            reduce using rule 74 (array_string -> STRING .)
    COMA            shift and go to state 176


state 148

    (76) array_boolean -> BOOL .
    (77) array_boolean -> BOOL . COMA array_boolean

    CDER            reduce using rule 76 (array_boolean -> BOOL .)
    COMA            shift and go to state 177


state 149

    (106) funcion -> FUNCTION VARIABLE PIZQ argumentos . PDER LIZQ instrucciones LDER
    (107) funcion -> FUNCTION VARIABLE PIZQ argumentos . PDER LIZQ LDER

    PDER            shift and go to state 178


state 150

    (108) funcion -> FUNCTION VARIABLE PIZQ PDER . LIZQ instrucciones LDER
    (109) funcion -> FUNCTION VARIABLE PIZQ PDER . LIZQ LDER

    LIZQ            shift and go to state 179


state 151

    (128) def_clase -> CLASS VARIABLE LIZQ cuerpo_class . LDER

    LDER            shift and go to state 180


state 152

    (129) def_clase -> CLASS VARIABLE LIZQ LDER .

    $end            reduce using rule 129 (def_clase -> CLASS VARIABLE LIZQ LDER .)
    LDER            reduce using rule 129 (def_clase -> CLASS VARIABLE LIZQ LDER .)


state 153

    (125) cuerpo_class -> metodos_class .

    LDER            reduce using rule 125 (cuerpo_class -> metodos_class .)


state 154

    (126) cuerpo_class -> constructor .
    (127) cuerpo_class -> constructor . metodos_class
    (123) metodos_class -> . funcion
    (124) metodos_class -> . funcion metodos_class
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER

    LDER            reduce using rule 126 (cuerpo_class -> constructor .)
    FUNCTION        shift and go to state 15

    metodos_class                  shift and go to state 181
    funcion                        shift and go to state 155

state 155

    (123) metodos_class -> funcion .
    (124) metodos_class -> funcion . metodos_class
    (123) metodos_class -> . funcion
    (124) metodos_class -> . funcion metodos_class
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER

    LDER            reduce using rule 123 (metodos_class -> funcion .)
    FUNCTION        shift and go to state 15

    funcion                        shift and go to state 155
    metodos_class                  shift and go to state 182

state 156

    (114) constructor -> CONSTRUCTOR PIZQ argumentos PDER . LIZQ metodo_cuerpo_class LDER

    LIZQ            shift and go to state 183


state 157

    (115) constructor -> CONSTRUCTOR PIZQ PDER LIZQ . metodo_cuerpo_class LDER
    (116) constructor -> CONSTRUCTOR PIZQ PDER LIZQ . LDER
    (120) metodo_cuerpo_class -> . cuerpo
    (121) metodo_cuerpo_class -> . var_class
    (122) metodo_cuerpo_class -> . metodo_cuerpo_class
    (1) cuerpo -> . instrucciones
    (2) cuerpo -> . funcion
    (3) cuerpo -> . estrcontrol
    (4) cuerpo -> . def_clase
    (5) cuerpo -> . constructor
    (6) cuerpo -> .
    (117) var_class -> . THIS PUNTO VARIABLE
    (118) var_class -> . THIS PUNTO VARIABLE IGUAL valor
    (119) var_class -> . THIS PUNTO VARIABLE IGUAL VARIABLE
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (128) def_clase -> . CLASS VARIABLE LIZQ cuerpo_class LDER
    (129) def_clase -> . CLASS VARIABLE LIZQ LDER
    (114) constructor -> . CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ LDER
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

  ! shift/reduce conflict for LDER resolved as shift
    LDER            shift and go to state 185
    THIS            shift and go to state 188
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    FUNCTION        shift and go to state 15
    CLASS           shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    TRY             shift and go to state 31
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

  ! LDER            [ reduce using rule 6 (cuerpo -> .) ]

    metodo_cuerpo_class            shift and go to state 184
    cuerpo                         shift and go to state 186
    var_class                      shift and go to state 187
    instrucciones                  shift and go to state 2
    funcion                        shift and go to state 3
    estrcontrol                    shift and go to state 4
    def_clase                      shift and go to state 5
    constructor                    shift and go to state 6
    instruccion                    shift and go to state 7
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 158

    (100) term -> VARIABLE RESTA . VARIABLE

    VARIABLE        shift and go to state 189


state 159

    (79) comparacion -> expression comparador expression DAMPERSAND . comparacion
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    expression                     shift and go to state 126
    comparacion                    shift and go to state 190
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 160

    (80) comparacion -> expression comparador expression DTUBO . comparacion
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    expression                     shift and go to state 126
    comparacion                    shift and go to state 191
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 161

    (58) trycatch -> TRY LIZQ instrucciones LDER . CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> TRY LIZQ instrucciones LDER . FINALLY LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER . CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    CATCH           shift and go to state 192
    FINALLY         shift and go to state 193


state 162

    (40) if -> IF PIZQ comparacion PDER . LIZQ instrucciones LDER
    (41) if -> IF PIZQ comparacion PDER . LIZQ instrucciones LDER elseif
    (42) if -> IF PIZQ comparacion PDER . LIZQ instrucciones LDER else

    LIZQ            shift and go to state 194


state 163

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA . comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR PIZQ declaasig PUNTOYCOMA . comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 195
    expression                     shift and go to state 126
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 164

    (50) for -> FOR PIZQ declaracion IN . VARIABLE PDER LIZQ instrucciones LDER

    VARIABLE        shift and go to state 196


state 165

    (51) while -> WHILE PIZQ comparacion PDER . LIZQ instrucciones LDER

    LIZQ            shift and go to state 197


state 166

    (52) dowhile -> DO LIZQ instrucciones LDER . WHILE PIZQ comparacion PDER PUNTOYCOMA

    WHILE           shift and go to state 198


state 167

    (53) switch -> SWITCH PIZQ VARIABLE PDER . LIZQ cases LDER

    LIZQ            shift and go to state 199


state 168

    (113) argumentos -> VARIABLE COMA argumentos .

    PDER            reduce using rule 113 (argumentos -> VARIABLE COMA argumentos .)


state 169

    (110) llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .

    BREAK           reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    CONTINUE        reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    RETURN          reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    TYPEOF          reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    VARIABLE        reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    TRY             reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    PIZQ            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    LIZQ            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    STRING          reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    VAR             reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    LET             reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    CONST           reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    IF              reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    FOR             reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    WHILE           reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    DO              reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    SWITCH          reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    ENTERO          reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    FLOAT           reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    $end            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    LDER            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    CASE            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    DEFAULT         reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)
    PDER            reduce using rule 110 (llamarfuncion -> VARIABLE PIZQ argumentos PDER PUNTOYCOMA .)


state 170

    (66) dec_array -> CIZQ array_enteros CDER .

    PUNTOYCOMA      reduce using rule 66 (dec_array -> CIZQ array_enteros CDER .)
    PDER            reduce using rule 66 (dec_array -> CIZQ array_enteros CDER .)


state 171

    (67) dec_array -> CIZQ array_flotante CDER .

    PUNTOYCOMA      reduce using rule 67 (dec_array -> CIZQ array_flotante CDER .)
    PDER            reduce using rule 67 (dec_array -> CIZQ array_flotante CDER .)


state 172

    (68) dec_array -> CIZQ array_string CDER .

    PUNTOYCOMA      reduce using rule 68 (dec_array -> CIZQ array_string CDER .)
    PDER            reduce using rule 68 (dec_array -> CIZQ array_string CDER .)


state 173

    (69) dec_array -> CIZQ array_boolean CDER .

    PUNTOYCOMA      reduce using rule 69 (dec_array -> CIZQ array_boolean CDER .)
    PDER            reduce using rule 69 (dec_array -> CIZQ array_boolean CDER .)


state 174

    (71) array_enteros -> ENTERO COMA . array_enteros
    (70) array_enteros -> . ENTERO
    (71) array_enteros -> . ENTERO COMA array_enteros

    ENTERO          shift and go to state 145

    array_enteros                  shift and go to state 200

state 175

    (73) array_flotante -> FLOAT COMA . array_flotante
    (72) array_flotante -> . FLOAT
    (73) array_flotante -> . FLOAT COMA array_flotante

    FLOAT           shift and go to state 146

    array_flotante                 shift and go to state 201

state 176

    (75) array_string -> STRING COMA . array_string
    (74) array_string -> . STRING
    (75) array_string -> . STRING COMA array_string

    STRING          shift and go to state 147

    array_string                   shift and go to state 202

state 177

    (77) array_boolean -> BOOL COMA . array_boolean
    (76) array_boolean -> . BOOL
    (77) array_boolean -> . BOOL COMA array_boolean

    BOOL            shift and go to state 148

    array_boolean                  shift and go to state 203

state 178

    (106) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER . LIZQ instrucciones LDER
    (107) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER . LIZQ LDER

    LIZQ            shift and go to state 204


state 179

    (108) funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ . instrucciones LDER
    (109) funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ . LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    LDER            shift and go to state 206
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 205
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 180

    (128) def_clase -> CLASS VARIABLE LIZQ cuerpo_class LDER .

    $end            reduce using rule 128 (def_clase -> CLASS VARIABLE LIZQ cuerpo_class LDER .)
    LDER            reduce using rule 128 (def_clase -> CLASS VARIABLE LIZQ cuerpo_class LDER .)


state 181

    (127) cuerpo_class -> constructor metodos_class .

    LDER            reduce using rule 127 (cuerpo_class -> constructor metodos_class .)


state 182

    (124) metodos_class -> funcion metodos_class .

    LDER            reduce using rule 124 (metodos_class -> funcion metodos_class .)


state 183

    (114) constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ . metodo_cuerpo_class LDER
    (120) metodo_cuerpo_class -> . cuerpo
    (121) metodo_cuerpo_class -> . var_class
    (122) metodo_cuerpo_class -> . metodo_cuerpo_class
    (1) cuerpo -> . instrucciones
    (2) cuerpo -> . funcion
    (3) cuerpo -> . estrcontrol
    (4) cuerpo -> . def_clase
    (5) cuerpo -> . constructor
    (6) cuerpo -> .
    (117) var_class -> . THIS PUNTO VARIABLE
    (118) var_class -> . THIS PUNTO VARIABLE IGUAL valor
    (119) var_class -> . THIS PUNTO VARIABLE IGUAL VARIABLE
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (106) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER
    (107) funcion -> . FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER
    (108) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER
    (109) funcion -> . FUNCTION VARIABLE PIZQ PDER LIZQ LDER
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (128) def_clase -> . CLASS VARIABLE LIZQ cuerpo_class LDER
    (129) def_clase -> . CLASS VARIABLE LIZQ LDER
    (114) constructor -> . CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER
    (115) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER
    (116) constructor -> . CONSTRUCTOR PIZQ PDER LIZQ LDER
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    LDER            reduce using rule 6 (cuerpo -> .)
    THIS            shift and go to state 188
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    FUNCTION        shift and go to state 15
    CLASS           shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    TRY             shift and go to state 31
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    metodo_cuerpo_class            shift and go to state 207
    cuerpo                         shift and go to state 186
    var_class                      shift and go to state 187
    instrucciones                  shift and go to state 2
    funcion                        shift and go to state 3
    estrcontrol                    shift and go to state 4
    def_clase                      shift and go to state 5
    constructor                    shift and go to state 6
    instruccion                    shift and go to state 7
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 184

    (115) constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class . LDER
    (122) metodo_cuerpo_class -> metodo_cuerpo_class .

  ! shift/reduce conflict for LDER resolved as shift
    LDER            shift and go to state 208

  ! LDER            [ reduce using rule 122 (metodo_cuerpo_class -> metodo_cuerpo_class .) ]


state 185

    (116) constructor -> CONSTRUCTOR PIZQ PDER LIZQ LDER .

    $end            reduce using rule 116 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ LDER .)
    FUNCTION        reduce using rule 116 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ LDER .)
    LDER            reduce using rule 116 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ LDER .)


state 186

    (120) metodo_cuerpo_class -> cuerpo .

    LDER            reduce using rule 120 (metodo_cuerpo_class -> cuerpo .)


state 187

    (121) metodo_cuerpo_class -> var_class .

    LDER            reduce using rule 121 (metodo_cuerpo_class -> var_class .)


state 188

    (117) var_class -> THIS . PUNTO VARIABLE
    (118) var_class -> THIS . PUNTO VARIABLE IGUAL valor
    (119) var_class -> THIS . PUNTO VARIABLE IGUAL VARIABLE

    PUNTO           shift and go to state 209


state 189

    (100) term -> VARIABLE RESTA VARIABLE .

    MULTI           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    DIV             reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    SUMA            reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    RESTA           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    MAYOR           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    MENOR           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    MAYIGUAL        reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    MENIGUAL        reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    DIGUAL          reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    NOIGUAL         reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    PUNTOYCOMA      reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    PDER            reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    LDER            reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    DAMPERSAND      reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)
    DTUBO           reduce using rule 100 (term -> VARIABLE RESTA VARIABLE .)


state 190

    (79) comparacion -> expression comparador expression DAMPERSAND comparacion .

    PUNTOYCOMA      reduce using rule 79 (comparacion -> expression comparador expression DAMPERSAND comparacion .)
    PDER            reduce using rule 79 (comparacion -> expression comparador expression DAMPERSAND comparacion .)


state 191

    (80) comparacion -> expression comparador expression DTUBO comparacion .

    PUNTOYCOMA      reduce using rule 80 (comparacion -> expression comparador expression DTUBO comparacion .)
    PDER            reduce using rule 80 (comparacion -> expression comparador expression DTUBO comparacion .)


state 192

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH . PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH . PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    PIZQ            shift and go to state 210


state 193

    (59) trycatch -> TRY LIZQ instrucciones LDER FINALLY . LIZQ instrucciones LDER

    LIZQ            shift and go to state 211


state 194

    (40) if -> IF PIZQ comparacion PDER LIZQ . instrucciones LDER
    (41) if -> IF PIZQ comparacion PDER LIZQ . instrucciones LDER elseif
    (42) if -> IF PIZQ comparacion PDER LIZQ . instrucciones LDER else
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 27
    instrucciones                  shift and go to state 212
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 195

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion . PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion . PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER

    PUNTOYCOMA      shift and go to state 213


state 196

    (50) for -> FOR PIZQ declaracion IN VARIABLE . PDER LIZQ instrucciones LDER

    PDER            shift and go to state 214


state 197

    (51) while -> WHILE PIZQ comparacion PDER LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 27
    instrucciones                  shift and go to state 215
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 198

    (52) dowhile -> DO LIZQ instrucciones LDER WHILE . PIZQ comparacion PDER PUNTOYCOMA

    PIZQ            shift and go to state 216


state 199

    (53) switch -> SWITCH PIZQ VARIABLE PDER LIZQ . cases LDER
    (54) cases -> . CASE VARIABLE DOSPUNTOS instrucciones
    (55) cases -> . CASE VARIABLE DOSPUNTOS instrucciones cases
    (56) cases -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 218
    DEFAULT         shift and go to state 219

    cases                          shift and go to state 217

state 200

    (71) array_enteros -> ENTERO COMA array_enteros .

    CDER            reduce using rule 71 (array_enteros -> ENTERO COMA array_enteros .)


state 201

    (73) array_flotante -> FLOAT COMA array_flotante .

    CDER            reduce using rule 73 (array_flotante -> FLOAT COMA array_flotante .)


state 202

    (75) array_string -> STRING COMA array_string .

    CDER            reduce using rule 75 (array_string -> STRING COMA array_string .)


state 203

    (77) array_boolean -> BOOL COMA array_boolean .

    CDER            reduce using rule 77 (array_boolean -> BOOL COMA array_boolean .)


state 204

    (106) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ . instrucciones LDER
    (107) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ . LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    LDER            shift and go to state 221
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 220
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 205

    (108) funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 222


state 206

    (109) funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ LDER .

    $end            reduce using rule 109 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ LDER .)
    FUNCTION        reduce using rule 109 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ LDER .)
    LDER            reduce using rule 109 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ LDER .)


state 207

    (114) constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class . LDER
    (122) metodo_cuerpo_class -> metodo_cuerpo_class .

  ! shift/reduce conflict for LDER resolved as shift
    LDER            shift and go to state 223

  ! LDER            [ reduce using rule 122 (metodo_cuerpo_class -> metodo_cuerpo_class .) ]


state 208

    (115) constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER .

    $end            reduce using rule 115 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER .)
    FUNCTION        reduce using rule 115 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER .)
    LDER            reduce using rule 115 (constructor -> CONSTRUCTOR PIZQ PDER LIZQ metodo_cuerpo_class LDER .)


state 209

    (117) var_class -> THIS PUNTO . VARIABLE
    (118) var_class -> THIS PUNTO . VARIABLE IGUAL valor
    (119) var_class -> THIS PUNTO . VARIABLE IGUAL VARIABLE

    VARIABLE        shift and go to state 224


state 210

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ . VARIABLE PDER LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ . VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    VARIABLE        shift and go to state 225


state 211

    (59) trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 226
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 212

    (40) if -> IF PIZQ comparacion PDER LIZQ instrucciones . LDER
    (41) if -> IF PIZQ comparacion PDER LIZQ instrucciones . LDER elseif
    (42) if -> IF PIZQ comparacion PDER LIZQ instrucciones . LDER else

    LDER            shift and go to state 227


state 213

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA . operadores PDER LIZQ instrucciones LDER
    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA . asignacion PDER LIZQ instrucciones LDER
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array

    VARIABLE        shift and go to state 230

    operadores                     shift and go to state 228
    asignacion                     shift and go to state 229

state 214

    (50) for -> FOR PIZQ declaracion IN VARIABLE PDER . LIZQ instrucciones LDER

    LIZQ            shift and go to state 231


state 215

    (51) while -> WHILE PIZQ comparacion PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 232


state 216

    (52) dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ . comparacion PDER PUNTOYCOMA
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 233
    expression                     shift and go to state 126
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 217

    (53) switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases . LDER

    LDER            shift and go to state 234


state 218

    (54) cases -> CASE . VARIABLE DOSPUNTOS instrucciones
    (55) cases -> CASE . VARIABLE DOSPUNTOS instrucciones cases

    VARIABLE        shift and go to state 235


state 219

    (56) cases -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 236


state 220

    (106) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 237


state 221

    (107) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER .

    $end            reduce using rule 107 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER .)
    FUNCTION        reduce using rule 107 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER .)
    LDER            reduce using rule 107 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ LDER .)


state 222

    (108) funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER .

    $end            reduce using rule 108 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER .)
    FUNCTION        reduce using rule 108 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 108 (funcion -> FUNCTION VARIABLE PIZQ PDER LIZQ instrucciones LDER .)


state 223

    (114) constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER .

    $end            reduce using rule 114 (constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER .)
    FUNCTION        reduce using rule 114 (constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER .)
    LDER            reduce using rule 114 (constructor -> CONSTRUCTOR PIZQ argumentos PDER LIZQ metodo_cuerpo_class LDER .)


state 224

    (117) var_class -> THIS PUNTO VARIABLE .
    (118) var_class -> THIS PUNTO VARIABLE . IGUAL valor
    (119) var_class -> THIS PUNTO VARIABLE . IGUAL VARIABLE

    LDER            reduce using rule 117 (var_class -> THIS PUNTO VARIABLE .)
    IGUAL           shift and go to state 238


state 225

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE . PDER LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE . PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    PDER            shift and go to state 239


state 226

    (59) trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones . LDER

    LDER            shift and go to state 240


state 227

    (40) if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .
    (41) if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER . elseif
    (42) if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER . else
    (43) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (44) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (45) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (46) else -> . ELSE LIZQ instrucciones LDER
    (47) else -> . ELSE LIZQ LDER

    BREAK           reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 40 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    ELSE            shift and go to state 243

    elseif                         shift and go to state 241
    else                           shift and go to state 242

state 228

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores . PDER LIZQ instrucciones LDER

    PDER            shift and go to state 244


state 229

    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion . PDER LIZQ instrucciones LDER

    PDER            shift and go to state 245


state 230

    (89) operadores -> VARIABLE . DSUMA
    (90) operadores -> VARIABLE . DRESTA
    (61) asignacion -> VARIABLE . IGUAL expression
    (62) asignacion -> VARIABLE . IGUAL comparacion
    (63) asignacion -> VARIABLE . IGUAL valor
    (64) asignacion -> VARIABLE . IGUAL llamarfuncion
    (65) asignacion -> VARIABLE . IGUAL dec_array

    DSUMA           shift and go to state 57
    DRESTA          shift and go to state 58
    IGUAL           shift and go to state 53


state 231

    (50) for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    declaracion                    shift and go to state 28
    instrucciones                  shift and go to state 246
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 232

    (51) while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .

    BREAK           reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 51 (while -> WHILE PIZQ comparacion PDER LIZQ instrucciones LDER .)


state 233

    (52) dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion . PDER PUNTOYCOMA

    PDER            shift and go to state 247


state 234

    (53) switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .

    BREAK           reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    CONTINUE        reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    RETURN          reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    TYPEOF          reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    VARIABLE        reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    TRY             reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    PIZQ            reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    LIZQ            reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    STRING          reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    VAR             reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    LET             reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    CONST           reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    IF              reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    FOR             reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    WHILE           reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    DO              reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    SWITCH          reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    ENTERO          reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    FLOAT           reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    $end            reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    LDER            reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    CASE            reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)
    DEFAULT         reduce using rule 53 (switch -> SWITCH PIZQ VARIABLE PDER LIZQ cases LDER .)


state 235

    (54) cases -> CASE VARIABLE . DOSPUNTOS instrucciones
    (55) cases -> CASE VARIABLE . DOSPUNTOS instrucciones cases

    DOSPUNTOS       shift and go to state 248


state 236

    (56) cases -> DEFAULT DOSPUNTOS . instrucciones
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 249
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 237

    (106) funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER .

    $end            reduce using rule 106 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER .)
    FUNCTION        reduce using rule 106 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 106 (funcion -> FUNCTION VARIABLE PIZQ argumentos PDER LIZQ instrucciones LDER .)


state 238

    (118) var_class -> THIS PUNTO VARIABLE IGUAL . valor
    (119) var_class -> THIS PUNTO VARIABLE IGUAL . VARIABLE
    (36) valor -> . ENTERO
    (37) valor -> . FLOAT
    (38) valor -> . STRING
    (39) valor -> . BOOL

    VARIABLE        shift and go to state 250
    ENTERO          shift and go to state 252
    FLOAT           shift and go to state 253
    STRING          shift and go to state 254
    BOOL            shift and go to state 108

    valor                          shift and go to state 251

state 239

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER . LIZQ instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER . LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER

    LIZQ            shift and go to state 255


state 240

    (59) trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .

    BREAK           reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    RETURN          reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    TRY             reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    STRING          reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    VAR             reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LET             reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CONST           reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    IF              reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    FOR             reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    WHILE           reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    DO              reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    $end            reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LDER            reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CASE            reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 59 (trycatch -> TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)


state 241

    (41) if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .

    BREAK           reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CONTINUE        reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    RETURN          reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    TYPEOF          reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    VARIABLE        reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    TRY             reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    PIZQ            reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LIZQ            reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    STRING          reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    VAR             reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LET             reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CONST           reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    IF              reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    FOR             reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    WHILE           reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    DO              reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    SWITCH          reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    ENTERO          reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    FLOAT           reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    $end            reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LDER            reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CASE            reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    DEFAULT         reduce using rule 41 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)


state 242

    (42) if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .

    BREAK           reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CONTINUE        reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    RETURN          reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    TYPEOF          reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    VARIABLE        reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    TRY             reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    PIZQ            reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LIZQ            reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    STRING          reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    VAR             reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LET             reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CONST           reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    IF              reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    FOR             reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    WHILE           reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    DO              reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    SWITCH          reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    ENTERO          reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    FLOAT           reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    $end            reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LDER            reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CASE            reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    DEFAULT         reduce using rule 42 (if -> IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)


state 243

    (43) elseif -> ELSE . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (44) elseif -> ELSE . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (45) elseif -> ELSE . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (46) else -> ELSE . LIZQ instrucciones LDER
    (47) else -> ELSE . LIZQ LDER

    IF              shift and go to state 256
    LIZQ            shift and go to state 257


state 244

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER . LIZQ instrucciones LDER

    LIZQ            shift and go to state 258


state 245

    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER . LIZQ instrucciones LDER

    LIZQ            shift and go to state 259


state 246

    (50) for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 260


state 247

    (52) dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 261


state 248

    (54) cases -> CASE VARIABLE DOSPUNTOS . instrucciones
    (55) cases -> CASE VARIABLE DOSPUNTOS . instrucciones cases
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 262
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 249

    (56) cases -> DEFAULT DOSPUNTOS instrucciones .

    LDER            reduce using rule 56 (cases -> DEFAULT DOSPUNTOS instrucciones .)


state 250

    (119) var_class -> THIS PUNTO VARIABLE IGUAL VARIABLE .

    LDER            reduce using rule 119 (var_class -> THIS PUNTO VARIABLE IGUAL VARIABLE .)


state 251

    (118) var_class -> THIS PUNTO VARIABLE IGUAL valor .

    LDER            reduce using rule 118 (var_class -> THIS PUNTO VARIABLE IGUAL valor .)


state 252

    (36) valor -> ENTERO .

    LDER            reduce using rule 36 (valor -> ENTERO .)


state 253

    (37) valor -> FLOAT .

    LDER            reduce using rule 37 (valor -> FLOAT .)


state 254

    (38) valor -> STRING .

    LDER            reduce using rule 38 (valor -> STRING .)


state 255

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ . instrucciones LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ . instrucciones LDER FINALLY LIZQ instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 263
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 256

    (43) elseif -> ELSE IF . PIZQ comparacion PDER LIZQ instrucciones LDER
    (44) elseif -> ELSE IF . PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (45) elseif -> ELSE IF . PIZQ comparacion PDER LIZQ instrucciones LDER else

    PIZQ            shift and go to state 264


state 257

    (46) else -> ELSE LIZQ . instrucciones LDER
    (47) else -> ELSE LIZQ . LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    LDER            shift and go to state 266
    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 265
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 258

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    declaasig                      shift and go to state 29
    comparacion                    shift and go to state 27
    operadores                     shift and go to state 30
    instrucciones                  shift and go to state 267
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 259

    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    declaasig                      shift and go to state 29
    comparacion                    shift and go to state 27
    asignacion                     shift and go to state 25
    instrucciones                  shift and go to state 268
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 260

    (50) for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .

    BREAK           reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 50 (for -> FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER .)


state 261

    (52) dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .

    BREAK           reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    CONTINUE        reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    RETURN          reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    TYPEOF          reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    VARIABLE        reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    TRY             reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    PIZQ            reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    LIZQ            reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    STRING          reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    VAR             reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    LET             reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    CONST           reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    IF              reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    FOR             reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    WHILE           reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    DO              reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    SWITCH          reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    ENTERO          reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    FLOAT           reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    $end            reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    LDER            reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    CASE            reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)
    DEFAULT         reduce using rule 52 (dowhile -> DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA .)


state 262

    (54) cases -> CASE VARIABLE DOSPUNTOS instrucciones .
    (55) cases -> CASE VARIABLE DOSPUNTOS instrucciones . cases
    (54) cases -> . CASE VARIABLE DOSPUNTOS instrucciones
    (55) cases -> . CASE VARIABLE DOSPUNTOS instrucciones cases
    (56) cases -> . DEFAULT DOSPUNTOS instrucciones

    LDER            reduce using rule 54 (cases -> CASE VARIABLE DOSPUNTOS instrucciones .)
    CASE            shift and go to state 218
    DEFAULT         shift and go to state 219

    cases                          shift and go to state 269

state 263

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones . LDER
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones . LDER FINALLY LIZQ instrucciones LDER

    LDER            shift and go to state 270


state 264

    (43) elseif -> ELSE IF PIZQ . comparacion PDER LIZQ instrucciones LDER
    (44) elseif -> ELSE IF PIZQ . comparacion PDER LIZQ instrucciones LDER elseif
    (45) elseif -> ELSE IF PIZQ . comparacion PDER LIZQ instrucciones LDER else
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    STRING          shift and go to state 38
    VARIABLE        shift and go to state 127
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 271
    expression                     shift and go to state 126
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 265

    (46) else -> ELSE LIZQ instrucciones . LDER

    LDER            shift and go to state 272


state 266

    (47) else -> ELSE LIZQ LDER .

    BREAK           reduce using rule 47 (else -> ELSE LIZQ LDER .)
    CONTINUE        reduce using rule 47 (else -> ELSE LIZQ LDER .)
    RETURN          reduce using rule 47 (else -> ELSE LIZQ LDER .)
    TYPEOF          reduce using rule 47 (else -> ELSE LIZQ LDER .)
    VARIABLE        reduce using rule 47 (else -> ELSE LIZQ LDER .)
    TRY             reduce using rule 47 (else -> ELSE LIZQ LDER .)
    PIZQ            reduce using rule 47 (else -> ELSE LIZQ LDER .)
    LIZQ            reduce using rule 47 (else -> ELSE LIZQ LDER .)
    STRING          reduce using rule 47 (else -> ELSE LIZQ LDER .)
    VAR             reduce using rule 47 (else -> ELSE LIZQ LDER .)
    LET             reduce using rule 47 (else -> ELSE LIZQ LDER .)
    CONST           reduce using rule 47 (else -> ELSE LIZQ LDER .)
    IF              reduce using rule 47 (else -> ELSE LIZQ LDER .)
    FOR             reduce using rule 47 (else -> ELSE LIZQ LDER .)
    WHILE           reduce using rule 47 (else -> ELSE LIZQ LDER .)
    DO              reduce using rule 47 (else -> ELSE LIZQ LDER .)
    SWITCH          reduce using rule 47 (else -> ELSE LIZQ LDER .)
    ENTERO          reduce using rule 47 (else -> ELSE LIZQ LDER .)
    FLOAT           reduce using rule 47 (else -> ELSE LIZQ LDER .)
    $end            reduce using rule 47 (else -> ELSE LIZQ LDER .)
    LDER            reduce using rule 47 (else -> ELSE LIZQ LDER .)
    CASE            reduce using rule 47 (else -> ELSE LIZQ LDER .)
    DEFAULT         reduce using rule 47 (else -> ELSE LIZQ LDER .)


state 267

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 273


state 268

    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones . LDER

    LDER            shift and go to state 274


state 269

    (55) cases -> CASE VARIABLE DOSPUNTOS instrucciones cases .

    LDER            reduce using rule 55 (cases -> CASE VARIABLE DOSPUNTOS instrucciones cases .)


state 270

    (58) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .
    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER . FINALLY LIZQ instrucciones LDER

    BREAK           reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 58 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER .)
    FINALLY         shift and go to state 275


state 271

    (43) elseif -> ELSE IF PIZQ comparacion . PDER LIZQ instrucciones LDER
    (44) elseif -> ELSE IF PIZQ comparacion . PDER LIZQ instrucciones LDER elseif
    (45) elseif -> ELSE IF PIZQ comparacion . PDER LIZQ instrucciones LDER else

    PDER            shift and go to state 276


state 272

    (46) else -> ELSE LIZQ instrucciones LDER .

    BREAK           reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    RETURN          reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    TRY             reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    STRING          reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    VAR             reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    LET             reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    CONST           reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    IF              reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    FOR             reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    WHILE           reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    DO              reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    $end            reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    LDER            reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    CASE            reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 46 (else -> ELSE LIZQ instrucciones LDER .)


state 273

    (48) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .

    BREAK           reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 48 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER .)


state 274

    (49) for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .

    BREAK           reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 49 (for -> FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER .)


state 275

    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY . LIZQ instrucciones LDER

    LIZQ            shift and go to state 277


state 276

    (43) elseif -> ELSE IF PIZQ comparacion PDER . LIZQ instrucciones LDER
    (44) elseif -> ELSE IF PIZQ comparacion PDER . LIZQ instrucciones LDER elseif
    (45) elseif -> ELSE IF PIZQ comparacion PDER . LIZQ instrucciones LDER else

    LIZQ            shift and go to state 278


state 277

    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ . instrucciones LDER
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    instrucciones                  shift and go to state 279
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    comparacion                    shift and go to state 27
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 278

    (43) elseif -> ELSE IF PIZQ comparacion PDER LIZQ . instrucciones LDER
    (44) elseif -> ELSE IF PIZQ comparacion PDER LIZQ . instrucciones LDER elseif
    (45) elseif -> ELSE IF PIZQ comparacion PDER LIZQ . instrucciones LDER else
    (7) instrucciones -> . instruccion PUNTOYCOMA
    (8) instrucciones -> . instruccion PUNTOYCOMA instrucciones
    (9) instrucciones -> . BREAK PUNTOYCOMA
    (10) instrucciones -> . CONTINUE PUNTOYCOMA
    (11) instrucciones -> . RETURN VARIABLE PUNTOYCOMA
    (12) instrucciones -> . TYPEOF VARIABLE
    (13) instrucciones -> . VARIABLE INSTANCEOF VARIABLE
    (14) instrucciones -> . estrcontrol
    (15) instrucciones -> . estrcontrol instrucciones
    (16) instrucciones -> . llamarfuncion
    (17) instrucciones -> . llamarfuncion instrucciones
    (18) instrucciones -> . trycatch
    (19) instrucciones -> . trycatch instrucciones
    (20) instruccion -> . asignacion
    (21) instruccion -> . expression
    (22) instruccion -> . comparacion
    (23) instruccion -> . declaracion
    (24) instruccion -> . declaasig
    (25) instruccion -> . operadores
    (31) estrcontrol -> . if
    (32) estrcontrol -> . for
    (33) estrcontrol -> . while
    (34) estrcontrol -> . dowhile
    (35) estrcontrol -> . switch
    (110) llamarfuncion -> . VARIABLE PIZQ argumentos PDER PUNTOYCOMA
    (111) llamarfuncion -> . VARIABLE PIZQ PDER PUNTOYCOMA
    (58) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER
    (59) trycatch -> . TRY LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (60) trycatch -> . TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER
    (61) asignacion -> . VARIABLE IGUAL expression
    (62) asignacion -> . VARIABLE IGUAL comparacion
    (63) asignacion -> . VARIABLE IGUAL valor
    (64) asignacion -> . VARIABLE IGUAL llamarfuncion
    (65) asignacion -> . VARIABLE IGUAL dec_array
    (91) expression -> . expression SUMA term
    (92) expression -> . VARIABLE SUMA VARIABLE
    (93) expression -> . expression RESTA term
    (94) expression -> . VARIABLE RESTA VARIABLE
    (95) expression -> . term
    (96) expression -> . VARIABLE
    (104) expression -> . PIZQ expression PDER
    (105) expression -> . LIZQ expression LDER
    (78) comparacion -> . expression comparador expression
    (79) comparacion -> . expression comparador expression DAMPERSAND comparacion
    (80) comparacion -> . expression comparador expression DTUBO comparacion
    (81) comparacion -> . STRING DIGUAL STRING
    (82) comparacion -> . VARIABLE comparador ENTERO
    (26) declaracion -> . VAR VARIABLE
    (27) declaracion -> . LET VARIABLE
    (28) declaasig -> . VAR asignacion
    (29) declaasig -> . LET asignacion
    (30) declaasig -> . CONST asignacion
    (89) operadores -> . VARIABLE DSUMA
    (90) operadores -> . VARIABLE DRESTA
    (40) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (41) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (42) if -> . IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (48) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA operadores PDER LIZQ instrucciones LDER
    (49) for -> . FOR PIZQ declaasig PUNTOYCOMA comparacion PUNTOYCOMA asignacion PDER LIZQ instrucciones LDER
    (50) for -> . FOR PIZQ declaracion IN VARIABLE PDER LIZQ instrucciones LDER
    (51) while -> . WHILE PIZQ comparacion PDER LIZQ instrucciones LDER
    (52) dowhile -> . DO LIZQ instrucciones LDER WHILE PIZQ comparacion PDER PUNTOYCOMA
    (53) switch -> . SWITCH PIZQ VARIABLE PDER LIZQ cases LDER
    (97) term -> . term MULTI factor
    (98) term -> . VARIABLE MULTI VARIABLE
    (99) term -> . term DIV factor
    (100) term -> . VARIABLE RESTA VARIABLE
    (101) term -> . factor
    (102) factor -> . ENTERO
    (103) factor -> . FLOAT

    BREAK           shift and go to state 8
    CONTINUE        shift and go to state 9
    RETURN          shift and go to state 10
    TYPEOF          shift and go to state 12
    VARIABLE        shift and go to state 11
    TRY             shift and go to state 31
    PIZQ            shift and go to state 16
    LIZQ            shift and go to state 17
    STRING          shift and go to state 38
    VAR             shift and go to state 40
    LET             shift and go to state 41
    CONST           shift and go to state 42
    IF              shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    SWITCH          shift and go to state 36
    ENTERO          shift and go to state 39
    FLOAT           shift and go to state 44

    comparacion                    shift and go to state 27
    instrucciones                  shift and go to state 280
    instruccion                    shift and go to state 7
    estrcontrol                    shift and go to state 45
    llamarfuncion                  shift and go to state 13
    trycatch                       shift and go to state 14
    asignacion                     shift and go to state 25
    expression                     shift and go to state 26
    declaracion                    shift and go to state 28
    declaasig                      shift and go to state 29
    operadores                     shift and go to state 30
    if                             shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    dowhile                        shift and go to state 21
    switch                         shift and go to state 22
    term                           shift and go to state 37
    factor                         shift and go to state 43

state 279

    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones . LDER

    LDER            shift and go to state 281


state 280

    (43) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones . LDER
    (44) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones . LDER elseif
    (45) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones . LDER else

    LDER            shift and go to state 282


state 281

    (60) trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .

    BREAK           reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    RETURN          reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    TRY             reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    STRING          reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    VAR             reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LET             reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CONST           reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    IF              reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    FOR             reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    WHILE           reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    DO              reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    $end            reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    LDER            reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    CASE            reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 60 (trycatch -> TRY LIZQ instrucciones LDER CATCH PIZQ VARIABLE PDER LIZQ instrucciones LDER FINALLY LIZQ instrucciones LDER .)


state 282

    (43) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .
    (44) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER . elseif
    (45) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER . else
    (43) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER
    (44) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif
    (45) elseif -> . ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else
    (46) else -> . ELSE LIZQ instrucciones LDER
    (47) else -> . ELSE LIZQ LDER

    BREAK           reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONTINUE        reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    RETURN          reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TYPEOF          reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VARIABLE        reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    TRY             reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    PIZQ            reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LIZQ            reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    STRING          reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    VAR             reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LET             reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CONST           reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    IF              reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FOR             reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    WHILE           reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DO              reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    SWITCH          reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    ENTERO          reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    FLOAT           reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    $end            reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    LDER            reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    CASE            reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    DEFAULT         reduce using rule 43 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER .)
    ELSE            shift and go to state 243

    elseif                         shift and go to state 283
    else                           shift and go to state 284

state 283

    (44) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .

    BREAK           reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CONTINUE        reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    RETURN          reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    TYPEOF          reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    VARIABLE        reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    TRY             reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    PIZQ            reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LIZQ            reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    STRING          reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    VAR             reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LET             reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CONST           reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    IF              reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    FOR             reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    WHILE           reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    DO              reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    SWITCH          reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    ENTERO          reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    FLOAT           reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    $end            reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    LDER            reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    CASE            reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)
    DEFAULT         reduce using rule 44 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER elseif .)


state 284

    (45) elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .

    BREAK           reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CONTINUE        reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    RETURN          reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    TYPEOF          reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    VARIABLE        reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    TRY             reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    PIZQ            reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LIZQ            reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    STRING          reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    VAR             reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LET             reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CONST           reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    IF              reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    FOR             reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    WHILE           reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    DO              reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    SWITCH          reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    ENTERO          reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    FLOAT           reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    $end            reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    LDER            reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    CASE            reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)
    DEFAULT         reduce using rule 45 (elseif -> ELSE IF PIZQ comparacion PDER LIZQ instrucciones LDER else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUMA in state 11 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 11 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 11 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 11 resolved as shift
WARNING: shift/reduce conflict for MAYIGUAL in state 11 resolved as shift
WARNING: shift/reduce conflict for MENIGUAL in state 11 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 11 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 11 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 71 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 71 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 99 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for MENIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 127 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 127 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 127 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 127 resolved as shift
WARNING: shift/reduce conflict for MAYIGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for MENIGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for LDER in state 157 resolved as shift
WARNING: shift/reduce conflict for LDER in state 184 resolved as shift
WARNING: shift/reduce conflict for LDER in state 207 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (cuerpo -> estrcontrol)
WARNING: rejected rule (instrucciones -> estrcontrol) in state 4
WARNING: reduce/reduce conflict in state 106 resolved using rule (valor -> ENTERO)
WARNING: rejected rule (factor -> ENTERO) in state 106
WARNING: reduce/reduce conflict in state 107 resolved using rule (valor -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 107
WARNING: reduce/reduce conflict in state 111 resolved using rule (expression -> VARIABLE RESTA VARIABLE)
WARNING: rejected rule (term -> VARIABLE RESTA VARIABLE) in state 111
